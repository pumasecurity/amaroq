[
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2022-04-24T08:33:35.726602Z",
        "credit": [
          "Gil Mirmovitch"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Insecure Defaults due to improper handling of StackOverFlow exception (SOE) whenever nested expressions are being processed. Exploiting this vulnerability results in Denial Of Service (DoS), and it is exploitable when an attacker sends 5 requests that cause SOE in time frame of 5 minutes.\r\n\r\n**Note:**\r\nThis vulnerability is only applicable to systems deployed on IIS (Internet Information Services) web-server\r\n\r\n## PoC:\r\n\r\n```js\r\n\r\nusing System;\r\n\r\nusing System.IO;\r\n\r\nusing System.Linq;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Newtonsoft.Json.Linq;\r\n\r\n\r\nnamespace JsonTests\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            //Create a string representation of an highly nested object (JSON serialized)\r\n            int nRep = 24000;\r\n            string json = string.Concat(Enumerable.Repeat(\"{a:\", nRep)) + \"1\" +\r\n                          string.Concat(Enumerable.Repeat(\"}\", nRep));\r\n\r\n            //Parse this object (Parsing works well - no exception is being thrown)\r\n            var parsedJson = JObject.Parse(json);\r\n            \r\n            using (var ms = new MemoryStream())\r\n            using (var sWriter = new StreamWriter(ms))\r\n            using (var jWriter = new JsonTextWriter(sWriter))\r\n            {\r\n                //Trying to serialize the object will result in StackOverflowException !!!\r\n                parsedJson.WriteTo(jWriter);\r\n            }\r\n\r\n            //ToString throws StackOverflowException as well  (ToString is very unefficient - even for smaller payloads, it will occupy a lot of CPU & Memory)\r\n            //parsedJson.ToString();\r\n\r\n            //JsonConvert.SerializeObject throws StackOverflowException as well\r\n            //string a = JsonConvert.SerializeObject(parsedJson);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n```\n## Remediation\nUpgrade `Newtonsoft.Json` to version 13.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66)\n- [GitHub Issue](https://github.com/JamesNK/Newtonsoft.Json/issues/2457)\n- [GitHub PR](https://github.com/JamesNK/Newtonsoft.Json/pull/2462)\n- [Security Advisory](https://alephsecurity.com/vulns/aleph-2018004)\n- [Security Article](https://alephsecurity.com/2018/10/22/StackOverflowException/)\n",
        "disclosureTime": "2022-04-24T08:33:33Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "13.0.1"
        ],
        "id": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
        "identifiers": {
          "CWE": [
            "CWE-755"
          ],
          "GHSA": [
            "GHSA-5crp-9r3c-p9vr"
          ],
          "CVE": []
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-08-08T07:46:17.314095Z",
        "moduleName": "newtonsoft.json",
        "packageManager": "nuget",
        "packageName": "Newtonsoft.Json",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-24T10:58:25Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/issues/2457"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/pull/2462"
          },
          {
            "title": "Security Advisory",
            "url": "https://alephsecurity.com/vulns/aleph-2018004"
          },
          {
            "title": "Security Article",
            "url": "https://alephsecurity.com/2018/10/22/StackOverflowException/"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Insecure Defaults",
        "insights": {
          "triageAdvice": "This vulnerability is only applicable on systems deployed on IIS (Internet Information Services) web-server"
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,13.0.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Newtonsoft.Json@10.0.3"
        ],
        "upgradePath": [
          false,
          "Newtonsoft.Json@13.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Newtonsoft.Json",
        "version": "10.0.3"
      }
    ],
    "ok": false,
    "dependencyCount": 10,
    "org": "puma-security",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "1 vulnerable dependency path",
    "remediation": {
      "unresolved": [],
      "upgrade": {
        "Newtonsoft.Json@10.0.3": {
          "upgradeTo": "Newtonsoft.Json@13.0.1",
          "upgrades": [
            "Newtonsoft.Json@10.0.3"
          ],
          "vulns": [
            "SNYK-DOTNET-NEWTONSOFTJSON-2774678"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "targetFile": "src/Common/packages.config",
    "projectName": "puma-prey",
    "foundProjectCount": 8,
    "displayTargetFile": "src/Common/packages.config",
    "path": "/Users/test/source/puma/puma-prey"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 38,
    "org": "puma-security",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "targetFile": "src/Coyote/obj/project.assets.json",
    "projectName": "puma-prey",
    "foundProjectCount": 8,
    "displayTargetFile": "src/Coyote/obj/project.assets.json",
    "path": "/Users/test/source/puma/puma-prey"
  },
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-20T14:06:46.708346Z",
        "credit": [
          "Yonatan Offek (poiu)"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in` data-template`, `data-content ` and `data-title` properties of tooltip/popover.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.1, 4.3.1 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0)\n- [GitHub Commit](https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/28236)\n- [NPM Security Adviory](https://www.npmjs.com/advisories/891)\n",
        "disclosureTime": "2019-02-11T19:32:59Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "3.4.1",
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450216",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "891"
          ],
          "CVE": [
            "CVE-2019-8331"
          ],
          "GHSA": [
            "GHSA-9v3m-8fp8-mj99"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-22T17:02:12.908715Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-02-15T19:32:59Z",
        "references": [
          {
            "title": "Bootstrap Blog",
            "url": "https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/28236"
          },
          {
            "title": "NPM Security Adviory",
            "url": "https://www.npmjs.com/advisories/891"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-08T15:23:11.969402Z"
          },
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-05-17T01:11:13.553666Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.1)",
            "[4.0.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@3.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@3.4.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "3.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-21T15:39:13.387334Z",
        "credit": [
          "1Jesper1"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `tooltip`, `collapse` and `scrollspy` plugins.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 4.1.2, 3.4.0 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26625)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26627)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26628)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/26630)\n",
        "disclosureTime": "2018-05-29T21:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450234",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-7mvr-5x2g-wfc8"
          ],
          "CVE": [
            "CVE-2018-14040",
            "CVE-2018-14042"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-07-06T14:09:26.251264Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-06-12T08:15:05Z",
        "references": [
          {
            "title": "Bootstrap Blog",
            "url": "https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26625"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26627"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26628"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/27915%23issuecomment-452140906"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/twbs/bootstrap/pull/26630"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:19:35.710411Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T19:22:17.597704Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.0.0 ,4.1.2)",
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@3.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@3.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "3.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2019-06-21T15:48:27.574219Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `affix` configuration target property.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootstrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n- [POC: GitHub Issue](https://github.com/twbs/bootstrap/issues/27045)\n",
        "disclosureTime": "2019-01-09T05:29:00Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450235",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "CVE": [
            "CVE-2018-20677"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-09-24T13:25:49.540636Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:20Z",
        "references": [
          {
            "title": "GetBootstrap Blog",
            "url": "https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/twbs/bootstrap/pull/27047"
          },
          {
            "title": "POC: GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/27045"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:26:07.960947Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T21:20:54.891885Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@3.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@3.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "3.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-21T15:54:16.144167Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the tooltip `data-viewport` attribute.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootsrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27044)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n",
        "disclosureTime": "2018-08-13T05:41:27Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450236",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "CVE": [
            "CVE-2018-20676"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:41:11.152542Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:20Z",
        "references": [
          {
            "title": "GetBootsrap Blog",
            "url": "https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/27044"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/twbs/bootstrap/pull/27047"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:26:09.818462Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T21:20:52.857798Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@3.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@3.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "3.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2019-06-21T13:35:41.864218Z",
        "credit": [
          "Semmle Security Research Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jQuery` to version 3.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\n- [Hackerone Report](https://hackerone.com/reports/454365)\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\n",
        "disclosureTime": "2019-03-26T08:40:15Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-JQUERY-450226",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "796"
          ],
          "CVE": [
            "CVE-2019-5428",
            "CVE-2019-11358"
          ],
          "GHSA": [
            "GHSA-wv67-q8rr-grjp"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-09-14T15:25:01.031723Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-03-27T08:40:08Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/4333"
          },
          {
            "title": "Hackerone Report",
            "url": "https://hackerone.com/reports/454365"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/"
          },
          {
            "title": "Third-Party Backported Patches Repo",
            "url": "https://github.com/DanielRuf/snyk-js-jquery-174006"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@1.10.2"
        ],
        "upgradePath": [
          false,
          "jQuery@3.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "1.10.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-21T14:18:44.036638Z",
        "credit": [
          "Egor Homakov"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nattacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\r\n\r\n**Note:** After being implemented in version 1.12.0, the fix of this vulnerability was reverted in 1.12.3, and then was only reintroduced in version 3.0.0-beta1. The fix was never released in any tag of the 2.x.x branch, as it was reverted out of the branch before being released.\n\n## Details\n A cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jQuery` to version 1.12.2, 3.0.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n\n- [GitHub Commit](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n",
        "disclosureTime": "2015-06-26T21:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.12.2",
          "3.0.0"
        ],
        "id": "SNYK-DOTNET-JQUERY-450227",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "328"
          ],
          "CVE": [
            "CVE-2015-9251",
            "CVE-2017-16012"
          ],
          "GHSA": [
            "GHSA-rmxg-73gg-4p98"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-05-08T09:55:22.507317Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2016-11-27T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jquery/jquery/issues/2432"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/2588"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T17:48:44.587139Z"
          },
          {
            "assigner": "SUSE",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-05-03T23:27:19.013168Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T20:28:11.854108Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,1.12.2)",
            "[1.12.3 ,3.0.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@1.10.2"
        ],
        "upgradePath": [
          false,
          "jQuery@1.12.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "1.10.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-15T09:24:35.290824Z",
        "credit": [
          "Masato Kinugawa"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jQuery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw)\n",
        "disclosureTime": "2020-04-10T00:00:00Z",
        "exploit": "Functional",
        "functions": [],
        "fixedIn": [
          "3.5.0"
        ],
        "id": "SNYK-DOTNET-JQUERY-565440",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-jpcq-cgw6-v4j6"
          ],
          "CVE": [
            "CVE-2020-11023"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-15T04:10:12.351042Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-04-13T15:33:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77"
          },
          {
            "title": "PoC",
            "url": "https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html"
          },
          {
            "title": "Release Notes",
            "url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/"
          },
          {
            "title": "Security Blog",
            "url": "https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-07-26T01:11:36.219427Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-19T20:44:30.240281Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[1.0.3 ,3.5.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@1.10.2"
        ],
        "upgradePath": [
          false,
          "jQuery@3.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "1.10.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2016-11-06T15:12:44.538000Z",
        "credit": [
          "Egor Homakov"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n[`jquery`](https://www.nuget.org/packages/jQuery) is JavaScript library for DOM operations.\n\nAffected versions of the package are vulnerable to Cross-site Scripting (XSS) attacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\nUpgrade `jquery` to version `3.0.0` or higher.\n\n## References\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n- [GitHub Commit 3.0.0](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n- [GitHub Commit 1.12](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n- [Vulnerable code](https://github.com/jquery/jquery/blob/250a1990baa571de60325ab2c52eabb399c4cf9e/src/ajax/script.js#L18)\n",
        "disclosureTime": "2015-06-26T21:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.12.0",
          "3.0.0-beta1"
        ],
        "id": "SNYK-DOTNET-JQUERY-60118",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "328"
          ],
          "CVE": []
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:41:17.432205Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2016-11-27T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jquery/jquery/issues/2432"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/2588"
          },
          {
            "title": "Vulnerable code",
            "url": "https://github.com/jquery/jquery/blob/250a1990baa571de60325ab2c52eabb399c4cf9e/src/ajax/script.js%23L18"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[1.4.0, 1.12.0)",
            "(1.12.3, 3.0.0-beta1)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@1.10.2"
        ],
        "upgradePath": [
          false,
          "jQuery@1.12.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "1.10.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2021-01-10T13:41:04.702749Z",
        "credit": [
          "Erik Krogh Kristensen"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `url` method.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `jQuery.Validation` to version 1.19.3 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery-validation/jquery-validation/pull/2371/commits/5e5641072312845b9130ed06f115816c8f0e6b3c)\n- [GitHub PR](https://github.com/jquery-validation/jquery-validation/pull/2371)\n",
        "disclosureTime": "2021-01-10T13:24:58Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.19.3"
        ],
        "id": "SNYK-DOTNET-JQUERYVALIDATION-1056869",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSL": [
            "GHSL-2020-294"
          ],
          "CVE": [
            "CVE-2021-21252"
          ],
          "GHSA": [
            "GHSA-jxwx-85vp-gvwm"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-07-04T09:19:52.126706Z",
        "moduleName": "jquery.validation",
        "packageManager": "nuget",
        "packageName": "jQuery.Validation",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-01-14T17:44:14Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery-validation/jquery-validation/pull/2371/commits/5e5641072312845b9130ed06f115816c8f0e6b3c"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery-validation/jquery-validation/pull/2371"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:35:02.099519Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,1.19.3)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "jQuery.Validation@1.11.1"
        ],
        "upgradePath": [
          false,
          "jQuery.Validation@1.19.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery.Validation",
        "version": "1.11.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-10-19T15:14:55.392708Z",
        "credit": [
          "Matt Langlois of Github Security Team"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[Microsoft.Owin](https://www.nuget.org/packages/Microsoft.Owin/) is a Provides a set of helper types and abstractions for simplifying the creation of OWIN components.\n\nAffected versions of this package are vulnerable to Security Bypass. The ASP.NET Core cookie parser decodes entire cookie strings which could allow a malicious attacker to set a second cookie with the name being percent encoded. The security update addresses the vulnerability by fixing the way the ASP.NET Core cookie parser handles encoded names. This CVE also affects `Microsoft.Owin` due to it using a similar cookie parsing mechanism.\n## Remediation\nUpgrade `Microsoft.Owin` to version 4.1.1 or higher.\n## References\n- [AspNetKatana Release Notes](https://github.com/aspnet/AspNetKatana/releases/tag/v4.1.1)\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/165)\n- [Microsoft.Owin PR](https://github.com/aspnet/AspNetKatana/pull/368)\n- [.NET 2.1 Release](https://dotnet.microsoft.com/download/dotnet-core/2.1)\n- [.NET 3.1 Release](https://dotnet.microsoft.com/download/dotnet-core/3.1)\n",
        "disclosureTime": "2020-09-08T07:00:00Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.1.1"
        ],
        "id": "SNYK-DOTNET-MICROSOFTOWIN-1019387",
        "identifiers": {
          "CWE": [
            "CWE-358"
          ],
          "CVE": [
            "CVE-2020-1045"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-11-12T14:49:39.457986Z",
        "moduleName": "microsoft.owin",
        "packageManager": "nuget",
        "packageName": "Microsoft.Owin",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-09-09T15:00:21Z",
        "references": [
          {
            "title": "AspNetKatana Release Notes",
            "url": "https://github.com/aspnet/AspNetKatana/releases/tag/v4.1.1"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/165"
          },
          {
            "title": "Microsoft.Owin PR",
            "url": "https://github.com/aspnet/AspNetKatana/pull/368"
          },
          {
            "title": ".NET 2.1 Release",
            "url": "https://dotnet.microsoft.com/download/dotnet-core/2.1"
          },
          {
            "title": ".NET 3.1 Release",
            "url": "https://dotnet.microsoft.com/download/dotnet-core/3.1"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Security Bypass",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-03T01:11:51.262299Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T21:28:59.437770Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Microsoft.Owin@3.0.1"
        ],
        "upgradePath": [
          false,
          "Microsoft.Owin@4.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Microsoft.Owin",
        "version": "3.0.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2022-08-31T08:21:00.432792Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[Microsoft.Owin](https://www.nuget.org/packages/Microsoft.Owin/) is a Provides a set of helper types and abstractions for simplifying the creation of OWIN components.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a flaw in `.NET 6.0`, `.NET 5.0`, and .`NET core 3.1`, which makes it possible for an attacker to manipulate cookies and exploit this vulnerability.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `Microsoft.Owin` to version 4.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/220)\n- [GitHub Issue](https://github.com/dotnet/aspnetcore/issues/41608)\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117)\n",
        "disclosureTime": "2022-08-30T19:32:29Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.2.2"
        ],
        "id": "SNYK-DOTNET-MICROSOFTOWIN-3011423",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-3rq8-h3gj-r5c6"
          ],
          "CVE": [
            "CVE-2022-29117"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-08-31T11:50:49.457988Z",
        "moduleName": "microsoft.owin",
        "packageManager": "nuget",
        "packageName": "Microsoft.Owin",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-08-31T11:50:47.954649Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/220"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/aspnetcore/issues/41608"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-05-24T01:11:23.018712Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T19:12:09.150810Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.2.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Microsoft.Owin@3.0.1"
        ],
        "upgradePath": [
          false,
          "Microsoft.Owin@4.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Microsoft.Owin",
        "version": "3.0.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2022-08-31T08:21:00.698258Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a flaw in `.NET 6.0`, `.NET 5.0`, and .`NET core 3.1`, which makes it possible for an attacker to manipulate cookies and exploit this vulnerability.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `Microsoft.Owin.Security.Cookies` to version 4.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/220)\n- [GitHub Issue](https://github.com/dotnet/aspnetcore/issues/41608)\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117)\n",
        "disclosureTime": "2022-08-30T19:32:29Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.2.2"
        ],
        "id": "SNYK-DOTNET-MICROSOFTOWINSECURITYCOOKIES-3011424",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-3rq8-h3gj-r5c6"
          ],
          "CVE": [
            "CVE-2022-29117"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-08-31T11:50:49.605691Z",
        "moduleName": "microsoft.owin.security.cookies",
        "packageManager": "nuget",
        "packageName": "Microsoft.Owin.Security.Cookies",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-08-31T11:50:47.954649Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/220"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/aspnetcore/issues/41608"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-05-24T01:11:23.018712Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T19:12:09.150810Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.2.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Microsoft.Owin.Security.Cookies@3.0.1"
        ],
        "upgradePath": [
          false,
          "Microsoft.Owin.Security.Cookies@4.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Microsoft.Owin.Security.Cookies",
        "version": "3.0.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2022-04-24T08:33:35.726602Z",
        "credit": [
          "Gil Mirmovitch"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Insecure Defaults due to improper handling of StackOverFlow exception (SOE) whenever nested expressions are being processed. Exploiting this vulnerability results in Denial Of Service (DoS), and it is exploitable when an attacker sends 5 requests that cause SOE in time frame of 5 minutes.\r\n\r\n**Note:**\r\nThis vulnerability is only applicable to systems deployed on IIS (Internet Information Services) web-server\r\n\r\n## PoC:\r\n\r\n```js\r\n\r\nusing System;\r\n\r\nusing System.IO;\r\n\r\nusing System.Linq;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Newtonsoft.Json.Linq;\r\n\r\n\r\nnamespace JsonTests\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            //Create a string representation of an highly nested object (JSON serialized)\r\n            int nRep = 24000;\r\n            string json = string.Concat(Enumerable.Repeat(\"{a:\", nRep)) + \"1\" +\r\n                          string.Concat(Enumerable.Repeat(\"}\", nRep));\r\n\r\n            //Parse this object (Parsing works well - no exception is being thrown)\r\n            var parsedJson = JObject.Parse(json);\r\n            \r\n            using (var ms = new MemoryStream())\r\n            using (var sWriter = new StreamWriter(ms))\r\n            using (var jWriter = new JsonTextWriter(sWriter))\r\n            {\r\n                //Trying to serialize the object will result in StackOverflowException !!!\r\n                parsedJson.WriteTo(jWriter);\r\n            }\r\n\r\n            //ToString throws StackOverflowException as well  (ToString is very unefficient - even for smaller payloads, it will occupy a lot of CPU & Memory)\r\n            //parsedJson.ToString();\r\n\r\n            //JsonConvert.SerializeObject throws StackOverflowException as well\r\n            //string a = JsonConvert.SerializeObject(parsedJson);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n```\n## Remediation\nUpgrade `Newtonsoft.Json` to version 13.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66)\n- [GitHub Issue](https://github.com/JamesNK/Newtonsoft.Json/issues/2457)\n- [GitHub PR](https://github.com/JamesNK/Newtonsoft.Json/pull/2462)\n- [Security Advisory](https://alephsecurity.com/vulns/aleph-2018004)\n- [Security Article](https://alephsecurity.com/2018/10/22/StackOverflowException/)\n",
        "disclosureTime": "2022-04-24T08:33:33Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "13.0.1"
        ],
        "id": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
        "identifiers": {
          "CWE": [
            "CWE-755"
          ],
          "GHSA": [
            "GHSA-5crp-9r3c-p9vr"
          ],
          "CVE": []
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-08-08T07:46:17.314095Z",
        "moduleName": "newtonsoft.json",
        "packageManager": "nuget",
        "packageName": "Newtonsoft.Json",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-24T10:58:25Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/issues/2457"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/pull/2462"
          },
          {
            "title": "Security Advisory",
            "url": "https://alephsecurity.com/vulns/aleph-2018004"
          },
          {
            "title": "Security Article",
            "url": "https://alephsecurity.com/2018/10/22/StackOverflowException/"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Insecure Defaults",
        "insights": {
          "triageAdvice": "This vulnerability is only applicable on systems deployed on IIS (Internet Information Services) web-server"
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,13.0.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Newtonsoft.Json@6.0.4"
        ],
        "upgradePath": [
          false,
          "Newtonsoft.Json@13.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Newtonsoft.Json",
        "version": "6.0.4"
      }
    ],
    "ok": false,
    "dependencyCount": 72,
    "org": "puma-security",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "13 vulnerable dependency paths",
    "remediation": {
      "unresolved": [],
      "upgrade": {
        "Microsoft.Owin@3.0.1": {
          "upgradeTo": "Microsoft.Owin@4.2.2",
          "upgrades": [
            "Microsoft.Owin@3.0.1",
            "Microsoft.Owin@3.0.1"
          ],
          "vulns": [
            "SNYK-DOTNET-MICROSOFTOWIN-3011423",
            "SNYK-DOTNET-MICROSOFTOWIN-1019387"
          ]
        },
        "Microsoft.Owin.Security.Cookies@3.0.1": {
          "upgradeTo": "Microsoft.Owin.Security.Cookies@4.2.2",
          "upgrades": [
            "Microsoft.Owin.Security.Cookies@3.0.1"
          ],
          "vulns": [
            "SNYK-DOTNET-MICROSOFTOWINSECURITYCOOKIES-3011424"
          ]
        },
        "Newtonsoft.Json@6.0.4": {
          "upgradeTo": "Newtonsoft.Json@13.0.1",
          "upgrades": [
            "Newtonsoft.Json@6.0.4"
          ],
          "vulns": [
            "SNYK-DOTNET-NEWTONSOFTJSON-2774678"
          ]
        },
        "bootstrap@3.0.0": {
          "upgradeTo": "bootstrap@3.4.1",
          "upgrades": [
            "bootstrap@3.0.0",
            "bootstrap@3.0.0",
            "bootstrap@3.0.0",
            "bootstrap@3.0.0"
          ],
          "vulns": [
            "SNYK-DOTNET-BOOTSTRAP-450216",
            "SNYK-DOTNET-BOOTSTRAP-450234",
            "SNYK-DOTNET-BOOTSTRAP-450235",
            "SNYK-DOTNET-BOOTSTRAP-450236"
          ]
        },
        "jQuery@1.10.2": {
          "upgradeTo": "jQuery@3.5.0",
          "upgrades": [
            "jQuery@1.10.2",
            "jQuery@1.10.2",
            "jQuery@1.10.2",
            "jQuery@1.10.2"
          ],
          "vulns": [
            "SNYK-DOTNET-JQUERY-565440",
            "SNYK-DOTNET-JQUERY-450226",
            "SNYK-DOTNET-JQUERY-450227",
            "SNYK-DOTNET-JQUERY-60118"
          ]
        },
        "jQuery.Validation@1.11.1": {
          "upgradeTo": "jQuery.Validation@1.19.3",
          "upgrades": [
            "jQuery.Validation@1.11.1"
          ],
          "vulns": [
            "SNYK-DOTNET-JQUERYVALIDATION-1056869"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 13,
    "targetFile": "src/Fox/packages.config",
    "projectName": "puma-prey",
    "foundProjectCount": 8,
    "displayTargetFile": "src/Fox/packages.config",
    "path": "/Users/test/source/puma/puma-prey"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 95,
    "org": "puma-security",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "targetFile": "src/Gopher/obj/project.assets.json",
    "projectName": "puma-prey",
    "foundProjectCount": 8,
    "displayTargetFile": "src/Gopher/obj/project.assets.json",
    "path": "/Users/test/source/puma/puma-prey"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 31,
    "org": "puma-security",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "targetFile": "src/Rabbit/obj/project.assets.json",
    "projectName": "puma-prey",
    "foundProjectCount": 8,
    "displayTargetFile": "src/Rabbit/obj/project.assets.json",
    "path": "/Users/test/source/puma/puma-prey"
  },
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-20T14:06:46.708346Z",
        "credit": [
          "Yonatan Offek (poiu)"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in` data-template`, `data-content ` and `data-title` properties of tooltip/popover.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.1, 4.3.1 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0)\n- [GitHub Commit](https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/28236)\n- [NPM Security Adviory](https://www.npmjs.com/advisories/891)\n",
        "disclosureTime": "2019-02-11T19:32:59Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "3.4.1",
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450216",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "891"
          ],
          "CVE": [
            "CVE-2019-8331"
          ],
          "GHSA": [
            "GHSA-9v3m-8fp8-mj99"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-22T17:02:12.908715Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-02-15T19:32:59Z",
        "references": [
          {
            "title": "Bootstrap Blog",
            "url": "https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/28236"
          },
          {
            "title": "NPM Security Adviory",
            "url": "https://www.npmjs.com/advisories/891"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-08T15:23:11.969402Z"
          },
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-05-17T01:11:13.553666Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.1)",
            "[4.0.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@4.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@4.3.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "4.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-21T15:31:54.408234Z",
        "credit": [
          "1Jesper1"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia the `tooltip`, `collapse` and `scrollspy` plugins.\n\n## Details \nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `bootstrap` to version 4.1.2 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0)\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628)\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621)\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26625)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26627)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26628)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906)\n\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/26630)\n",
        "disclosureTime": "2018-05-29T21:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450231",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-pj7m-g53m-7638"
          ],
          "CVE": [
            "CVE-2018-14041"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-07-06T14:09:25.652775Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-06-12T08:15:05Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26625"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26627"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26628"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/27915%23issuecomment-452140906"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/twbs/bootstrap/pull/26630"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:19:24.650610Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T21:11:47.980832Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.0.0 ,4.1.2)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@4.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@4.1.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "4.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-21T15:39:13.387334Z",
        "credit": [
          "1Jesper1"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `tooltip`, `collapse` and `scrollspy` plugins.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 4.1.2, 3.4.0 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26625)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26627)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26628)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/26630)\n",
        "disclosureTime": "2018-05-29T21:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450234",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-7mvr-5x2g-wfc8"
          ],
          "CVE": [
            "CVE-2018-14040",
            "CVE-2018-14042"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-07-06T14:09:26.251264Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-06-12T08:15:05Z",
        "references": [
          {
            "title": "Bootstrap Blog",
            "url": "https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26625"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26627"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26628"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/27915%23issuecomment-452140906"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/twbs/bootstrap/pull/26630"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:19:35.710411Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T19:22:17.597704Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.0.0 ,4.1.2)",
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@4.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@4.1.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "4.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2019-06-21T13:35:41.864218Z",
        "credit": [
          "Semmle Security Research Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jQuery` to version 3.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\n- [Hackerone Report](https://hackerone.com/reports/454365)\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\n",
        "disclosureTime": "2019-03-26T08:40:15Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-JQUERY-450226",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "796"
          ],
          "CVE": [
            "CVE-2019-5428",
            "CVE-2019-11358"
          ],
          "GHSA": [
            "GHSA-wv67-q8rr-grjp"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-09-14T15:25:01.031723Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-03-27T08:40:08Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/4333"
          },
          {
            "title": "Hackerone Report",
            "url": "https://hackerone.com/reports/454365"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/"
          },
          {
            "title": "Third-Party Backported Patches Repo",
            "url": "https://github.com/DanielRuf/snyk-js-jquery-174006"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@3.3.1"
        ],
        "upgradePath": [
          false,
          "jQuery@3.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "3.3.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-15T09:24:35.290824Z",
        "credit": [
          "Masato Kinugawa"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jQuery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw)\n",
        "disclosureTime": "2020-04-10T00:00:00Z",
        "exploit": "Functional",
        "functions": [],
        "fixedIn": [
          "3.5.0"
        ],
        "id": "SNYK-DOTNET-JQUERY-565440",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-jpcq-cgw6-v4j6"
          ],
          "CVE": [
            "CVE-2020-11023"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-15T04:10:12.351042Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-04-13T15:33:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77"
          },
          {
            "title": "PoC",
            "url": "https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html"
          },
          {
            "title": "Release Notes",
            "url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/"
          },
          {
            "title": "Security Blog",
            "url": "https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-07-26T01:11:36.219427Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-19T20:44:30.240281Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[1.0.3 ,3.5.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@3.3.1"
        ],
        "upgradePath": [
          false,
          "jQuery@3.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "3.3.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2021-01-10T13:41:04.702749Z",
        "credit": [
          "Erik Krogh Kristensen"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `url` method.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `jQuery.Validation` to version 1.19.3 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery-validation/jquery-validation/pull/2371/commits/5e5641072312845b9130ed06f115816c8f0e6b3c)\n- [GitHub PR](https://github.com/jquery-validation/jquery-validation/pull/2371)\n",
        "disclosureTime": "2021-01-10T13:24:58Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.19.3"
        ],
        "id": "SNYK-DOTNET-JQUERYVALIDATION-1056869",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSL": [
            "GHSL-2020-294"
          ],
          "CVE": [
            "CVE-2021-21252"
          ],
          "GHSA": [
            "GHSA-jxwx-85vp-gvwm"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-07-04T09:19:52.126706Z",
        "moduleName": "jquery.validation",
        "packageManager": "nuget",
        "packageName": "jQuery.Validation",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-01-14T17:44:14Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery-validation/jquery-validation/pull/2371/commits/5e5641072312845b9130ed06f115816c8f0e6b3c"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery-validation/jquery-validation/pull/2371"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:35:02.099519Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,1.19.3)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "jQuery.Validation@1.16.0"
        ],
        "upgradePath": [
          false,
          "jQuery.Validation@1.19.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery.Validation",
        "version": "1.16.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-10-19T15:14:55.392708Z",
        "credit": [
          "Matt Langlois of Github Security Team"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[Microsoft.Owin](https://www.nuget.org/packages/Microsoft.Owin/) is a Provides a set of helper types and abstractions for simplifying the creation of OWIN components.\n\nAffected versions of this package are vulnerable to Security Bypass. The ASP.NET Core cookie parser decodes entire cookie strings which could allow a malicious attacker to set a second cookie with the name being percent encoded. The security update addresses the vulnerability by fixing the way the ASP.NET Core cookie parser handles encoded names. This CVE also affects `Microsoft.Owin` due to it using a similar cookie parsing mechanism.\n## Remediation\nUpgrade `Microsoft.Owin` to version 4.1.1 or higher.\n## References\n- [AspNetKatana Release Notes](https://github.com/aspnet/AspNetKatana/releases/tag/v4.1.1)\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/165)\n- [Microsoft.Owin PR](https://github.com/aspnet/AspNetKatana/pull/368)\n- [.NET 2.1 Release](https://dotnet.microsoft.com/download/dotnet-core/2.1)\n- [.NET 3.1 Release](https://dotnet.microsoft.com/download/dotnet-core/3.1)\n",
        "disclosureTime": "2020-09-08T07:00:00Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.1.1"
        ],
        "id": "SNYK-DOTNET-MICROSOFTOWIN-1019387",
        "identifiers": {
          "CWE": [
            "CWE-358"
          ],
          "CVE": [
            "CVE-2020-1045"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-11-12T14:49:39.457986Z",
        "moduleName": "microsoft.owin",
        "packageManager": "nuget",
        "packageName": "Microsoft.Owin",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-09-09T15:00:21Z",
        "references": [
          {
            "title": "AspNetKatana Release Notes",
            "url": "https://github.com/aspnet/AspNetKatana/releases/tag/v4.1.1"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/165"
          },
          {
            "title": "Microsoft.Owin PR",
            "url": "https://github.com/aspnet/AspNetKatana/pull/368"
          },
          {
            "title": ".NET 2.1 Release",
            "url": "https://dotnet.microsoft.com/download/dotnet-core/2.1"
          },
          {
            "title": ".NET 3.1 Release",
            "url": "https://dotnet.microsoft.com/download/dotnet-core/3.1"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Security Bypass",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-03T01:11:51.262299Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T21:28:59.437770Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Microsoft.Owin@4.0.0-preview1"
        ],
        "upgradePath": [
          false,
          "Microsoft.Owin@4.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Microsoft.Owin",
        "version": "4.0.0-preview1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2022-08-31T08:21:00.432792Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[Microsoft.Owin](https://www.nuget.org/packages/Microsoft.Owin/) is a Provides a set of helper types and abstractions for simplifying the creation of OWIN components.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a flaw in `.NET 6.0`, `.NET 5.0`, and .`NET core 3.1`, which makes it possible for an attacker to manipulate cookies and exploit this vulnerability.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `Microsoft.Owin` to version 4.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/220)\n- [GitHub Issue](https://github.com/dotnet/aspnetcore/issues/41608)\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117)\n",
        "disclosureTime": "2022-08-30T19:32:29Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.2.2"
        ],
        "id": "SNYK-DOTNET-MICROSOFTOWIN-3011423",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-3rq8-h3gj-r5c6"
          ],
          "CVE": [
            "CVE-2022-29117"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-08-31T11:50:49.457988Z",
        "moduleName": "microsoft.owin",
        "packageManager": "nuget",
        "packageName": "Microsoft.Owin",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-08-31T11:50:47.954649Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/220"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/aspnetcore/issues/41608"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-05-24T01:11:23.018712Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T19:12:09.150810Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.2.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Microsoft.Owin@4.0.0-preview1"
        ],
        "upgradePath": [
          false,
          "Microsoft.Owin@4.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Microsoft.Owin",
        "version": "4.0.0-preview1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2022-08-31T08:21:00.698258Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a flaw in `.NET 6.0`, `.NET 5.0`, and .`NET core 3.1`, which makes it possible for an attacker to manipulate cookies and exploit this vulnerability.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `Microsoft.Owin.Security.Cookies` to version 4.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/220)\n- [GitHub Issue](https://github.com/dotnet/aspnetcore/issues/41608)\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117)\n",
        "disclosureTime": "2022-08-30T19:32:29Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.2.2"
        ],
        "id": "SNYK-DOTNET-MICROSOFTOWINSECURITYCOOKIES-3011424",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-3rq8-h3gj-r5c6"
          ],
          "CVE": [
            "CVE-2022-29117"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-08-31T11:50:49.605691Z",
        "moduleName": "microsoft.owin.security.cookies",
        "packageManager": "nuget",
        "packageName": "Microsoft.Owin.Security.Cookies",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-08-31T11:50:47.954649Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/220"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/aspnetcore/issues/41608"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-05-24T01:11:23.018712Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T19:12:09.150810Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.2.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Microsoft.Owin.Security.Cookies@4.0.0-preview1"
        ],
        "upgradePath": [
          false,
          "Microsoft.Owin.Security.Cookies@4.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Microsoft.Owin.Security.Cookies",
        "version": "4.0.0-preview1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2022-04-24T08:33:35.726602Z",
        "credit": [
          "Gil Mirmovitch"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Insecure Defaults due to improper handling of StackOverFlow exception (SOE) whenever nested expressions are being processed. Exploiting this vulnerability results in Denial Of Service (DoS), and it is exploitable when an attacker sends 5 requests that cause SOE in time frame of 5 minutes.\r\n\r\n**Note:**\r\nThis vulnerability is only applicable to systems deployed on IIS (Internet Information Services) web-server\r\n\r\n## PoC:\r\n\r\n```js\r\n\r\nusing System;\r\n\r\nusing System.IO;\r\n\r\nusing System.Linq;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Newtonsoft.Json.Linq;\r\n\r\n\r\nnamespace JsonTests\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            //Create a string representation of an highly nested object (JSON serialized)\r\n            int nRep = 24000;\r\n            string json = string.Concat(Enumerable.Repeat(\"{a:\", nRep)) + \"1\" +\r\n                          string.Concat(Enumerable.Repeat(\"}\", nRep));\r\n\r\n            //Parse this object (Parsing works well - no exception is being thrown)\r\n            var parsedJson = JObject.Parse(json);\r\n            \r\n            using (var ms = new MemoryStream())\r\n            using (var sWriter = new StreamWriter(ms))\r\n            using (var jWriter = new JsonTextWriter(sWriter))\r\n            {\r\n                //Trying to serialize the object will result in StackOverflowException !!!\r\n                parsedJson.WriteTo(jWriter);\r\n            }\r\n\r\n            //ToString throws StackOverflowException as well  (ToString is very unefficient - even for smaller payloads, it will occupy a lot of CPU & Memory)\r\n            //parsedJson.ToString();\r\n\r\n            //JsonConvert.SerializeObject throws StackOverflowException as well\r\n            //string a = JsonConvert.SerializeObject(parsedJson);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n```\n## Remediation\nUpgrade `Newtonsoft.Json` to version 13.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66)\n- [GitHub Issue](https://github.com/JamesNK/Newtonsoft.Json/issues/2457)\n- [GitHub PR](https://github.com/JamesNK/Newtonsoft.Json/pull/2462)\n- [Security Advisory](https://alephsecurity.com/vulns/aleph-2018004)\n- [Security Article](https://alephsecurity.com/2018/10/22/StackOverflowException/)\n",
        "disclosureTime": "2022-04-24T08:33:33Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "13.0.1"
        ],
        "id": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
        "identifiers": {
          "CWE": [
            "CWE-755"
          ],
          "GHSA": [
            "GHSA-5crp-9r3c-p9vr"
          ],
          "CVE": []
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-08-08T07:46:17.314095Z",
        "moduleName": "newtonsoft.json",
        "packageManager": "nuget",
        "packageName": "Newtonsoft.Json",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-24T10:58:25Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/issues/2457"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/pull/2462"
          },
          {
            "title": "Security Advisory",
            "url": "https://alephsecurity.com/vulns/aleph-2018004"
          },
          {
            "title": "Security Article",
            "url": "https://alephsecurity.com/2018/10/22/StackOverflowException/"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Insecure Defaults",
        "insights": {
          "triageAdvice": "This vulnerability is only applicable on systems deployed on IIS (Internet Information Services) web-server"
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,13.0.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Newtonsoft.Json@11.0.1-beta3"
        ],
        "upgradePath": [
          false,
          "Newtonsoft.Json@13.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Newtonsoft.Json",
        "version": "11.0.1-beta3"
      }
    ],
    "ok": false,
    "dependencyCount": 114,
    "org": "puma-security",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "10 vulnerable dependency paths",
    "remediation": {
      "unresolved": [],
      "upgrade": {
        "Microsoft.Owin@4.0.0-preview1": {
          "upgradeTo": "Microsoft.Owin@4.2.2",
          "upgrades": [
            "Microsoft.Owin@4.0.0-preview1",
            "Microsoft.Owin@4.0.0-preview1"
          ],
          "vulns": [
            "SNYK-DOTNET-MICROSOFTOWIN-3011423",
            "SNYK-DOTNET-MICROSOFTOWIN-1019387"
          ]
        },
        "Microsoft.Owin.Security.Cookies@4.0.0-preview1": {
          "upgradeTo": "Microsoft.Owin.Security.Cookies@4.2.2",
          "upgrades": [
            "Microsoft.Owin.Security.Cookies@4.0.0-preview1"
          ],
          "vulns": [
            "SNYK-DOTNET-MICROSOFTOWINSECURITYCOOKIES-3011424"
          ]
        },
        "Newtonsoft.Json@11.0.1-beta3": {
          "upgradeTo": "Newtonsoft.Json@13.0.1",
          "upgrades": [
            "Newtonsoft.Json@11.0.1-beta3"
          ],
          "vulns": [
            "SNYK-DOTNET-NEWTONSOFTJSON-2774678"
          ]
        },
        "bootstrap@4.0.0": {
          "upgradeTo": "bootstrap@4.3.1",
          "upgrades": [
            "bootstrap@4.0.0",
            "bootstrap@4.0.0",
            "bootstrap@4.0.0"
          ],
          "vulns": [
            "SNYK-DOTNET-BOOTSTRAP-450216",
            "SNYK-DOTNET-BOOTSTRAP-450231",
            "SNYK-DOTNET-BOOTSTRAP-450234"
          ]
        },
        "jQuery@3.3.1": {
          "upgradeTo": "jQuery@3.5.0",
          "upgrades": [
            "jQuery@3.3.1",
            "jQuery@3.3.1"
          ],
          "vulns": [
            "SNYK-DOTNET-JQUERY-565440",
            "SNYK-DOTNET-JQUERY-450226"
          ]
        },
        "jQuery.Validation@1.16.0": {
          "upgradeTo": "jQuery.Validation@1.19.3",
          "upgrades": [
            "jQuery.Validation@1.16.0"
          ],
          "vulns": [
            "SNYK-DOTNET-JQUERYVALIDATION-1056869"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 10,
    "targetFile": "src/Raccoon/packages.config",
    "projectName": "puma-prey",
    "foundProjectCount": 8,
    "displayTargetFile": "src/Raccoon/packages.config",
    "path": "/Users/test/source/puma/puma-prey"
  },
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-20T14:06:46.708346Z",
        "credit": [
          "Yonatan Offek (poiu)"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in` data-template`, `data-content ` and `data-title` properties of tooltip/popover.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.1, 4.3.1 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0)\n- [GitHub Commit](https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/28236)\n- [NPM Security Adviory](https://www.npmjs.com/advisories/891)\n",
        "disclosureTime": "2019-02-11T19:32:59Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "3.4.1",
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450216",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "891"
          ],
          "CVE": [
            "CVE-2019-8331"
          ],
          "GHSA": [
            "GHSA-9v3m-8fp8-mj99"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-22T17:02:12.908715Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-02-15T19:32:59Z",
        "references": [
          {
            "title": "Bootstrap Blog",
            "url": "https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/28236"
          },
          {
            "title": "NPM Security Adviory",
            "url": "https://www.npmjs.com/advisories/891"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-08T15:23:11.969402Z"
          },
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-05-17T01:11:13.553666Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.1)",
            "[4.0.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@3.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@3.4.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "3.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-21T15:39:13.387334Z",
        "credit": [
          "1Jesper1"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `tooltip`, `collapse` and `scrollspy` plugins.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 4.1.2, 3.4.0 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26625)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26627)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26628)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/26630)\n",
        "disclosureTime": "2018-05-29T21:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450234",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-7mvr-5x2g-wfc8"
          ],
          "CVE": [
            "CVE-2018-14040",
            "CVE-2018-14042"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-07-06T14:09:26.251264Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-06-12T08:15:05Z",
        "references": [
          {
            "title": "Bootstrap Blog",
            "url": "https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26625"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26627"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/26628"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/27915%23issuecomment-452140906"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/twbs/bootstrap/pull/26630"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:19:35.710411Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T19:22:17.597704Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.0.0 ,4.1.2)",
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@3.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@3.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "3.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2019-06-21T15:48:27.574219Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `affix` configuration target property.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootstrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n- [POC: GitHub Issue](https://github.com/twbs/bootstrap/issues/27045)\n",
        "disclosureTime": "2019-01-09T05:29:00Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450235",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "CVE": [
            "CVE-2018-20677"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-09-24T13:25:49.540636Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:20Z",
        "references": [
          {
            "title": "GetBootstrap Blog",
            "url": "https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/twbs/bootstrap/pull/27047"
          },
          {
            "title": "POC: GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/27045"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:26:07.960947Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T21:20:54.891885Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@3.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@3.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "3.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-21T15:54:16.144167Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the tooltip `data-viewport` attribute.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootsrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27044)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n",
        "disclosureTime": "2018-08-13T05:41:27Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-BOOTSTRAP-450236",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "CVE": [
            "CVE-2018-20676"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:41:11.152542Z",
        "moduleName": "bootstrap",
        "packageManager": "nuget",
        "packageName": "bootstrap",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:20Z",
        "references": [
          {
            "title": "GetBootsrap Blog",
            "url": "https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/twbs/bootstrap/issues/27044"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/twbs/bootstrap/pull/27047"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:26:09.818462Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T21:20:52.857798Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "bootstrap@3.0.0"
        ],
        "upgradePath": [
          false,
          "bootstrap@3.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap",
        "version": "3.0.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2019-06-21T13:35:41.864218Z",
        "credit": [
          "Semmle Security Research Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jQuery` to version 3.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\n- [Hackerone Report](https://hackerone.com/reports/454365)\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\n",
        "disclosureTime": "2019-03-26T08:40:15Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "3.4.0"
        ],
        "id": "SNYK-DOTNET-JQUERY-450226",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "796"
          ],
          "CVE": [
            "CVE-2019-5428",
            "CVE-2019-11358"
          ],
          "GHSA": [
            "GHSA-wv67-q8rr-grjp"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-09-14T15:25:01.031723Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-03-27T08:40:08Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/4333"
          },
          {
            "title": "Hackerone Report",
            "url": "https://hackerone.com/reports/454365"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/"
          },
          {
            "title": "Third-Party Backported Patches Repo",
            "url": "https://github.com/DanielRuf/snyk-js-jquery-174006"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.4.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@1.10.2"
        ],
        "upgradePath": [
          false,
          "jQuery@3.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "1.10.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-06-21T14:18:44.036638Z",
        "credit": [
          "Egor Homakov"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nattacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\r\n\r\n**Note:** After being implemented in version 1.12.0, the fix of this vulnerability was reverted in 1.12.3, and then was only reintroduced in version 3.0.0-beta1. The fix was never released in any tag of the 2.x.x branch, as it was reverted out of the branch before being released.\n\n## Details\n A cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jQuery` to version 1.12.2, 3.0.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n\n- [GitHub Commit](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n",
        "disclosureTime": "2015-06-26T21:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.12.2",
          "3.0.0"
        ],
        "id": "SNYK-DOTNET-JQUERY-450227",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "328"
          ],
          "CVE": [
            "CVE-2015-9251",
            "CVE-2017-16012"
          ],
          "GHSA": [
            "GHSA-rmxg-73gg-4p98"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-05-08T09:55:22.507317Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2016-11-27T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jquery/jquery/issues/2432"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/2588"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-01-03T17:48:44.587139Z"
          },
          {
            "assigner": "SUSE",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-05-03T23:27:19.013168Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-01T20:28:11.854108Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,1.12.2)",
            "[1.12.3 ,3.0.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@1.10.2"
        ],
        "upgradePath": [
          false,
          "jQuery@1.12.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "1.10.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:F/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-15T09:24:35.290824Z",
        "credit": [
          "Masato Kinugawa"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jQuery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw)\n",
        "disclosureTime": "2020-04-10T00:00:00Z",
        "exploit": "Functional",
        "functions": [],
        "fixedIn": [
          "3.5.0"
        ],
        "id": "SNYK-DOTNET-JQUERY-565440",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-jpcq-cgw6-v4j6"
          ],
          "CVE": [
            "CVE-2020-11023"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-15T04:10:12.351042Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-04-13T15:33:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77"
          },
          {
            "title": "PoC",
            "url": "https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html"
          },
          {
            "title": "Release Notes",
            "url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/"
          },
          {
            "title": "Security Blog",
            "url": "https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-07-26T01:11:36.219427Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "severity": "medium",
            "modificationTime": "2022-09-19T20:44:30.240281Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[1.0.3 ,3.5.0)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@1.10.2"
        ],
        "upgradePath": [
          false,
          "jQuery@3.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "1.10.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2016-11-06T15:12:44.538000Z",
        "credit": [
          "Egor Homakov"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n[`jquery`](https://www.nuget.org/packages/jQuery) is JavaScript library for DOM operations.\n\nAffected versions of the package are vulnerable to Cross-site Scripting (XSS) attacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\nUpgrade `jquery` to version `3.0.0` or higher.\n\n## References\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n- [GitHub Commit 3.0.0](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n- [GitHub Commit 1.12](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n- [Vulnerable code](https://github.com/jquery/jquery/blob/250a1990baa571de60325ab2c52eabb399c4cf9e/src/ajax/script.js#L18)\n",
        "disclosureTime": "2015-06-26T21:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.12.0",
          "3.0.0-beta1"
        ],
        "id": "SNYK-DOTNET-JQUERY-60118",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "328"
          ],
          "CVE": []
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:41:17.432205Z",
        "moduleName": "jquery",
        "packageManager": "nuget",
        "packageName": "jQuery",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2016-11-27T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jquery/jquery/issues/2432"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jquery/jquery/pull/2588"
          },
          {
            "title": "Vulnerable code",
            "url": "https://github.com/jquery/jquery/blob/250a1990baa571de60325ab2c52eabb399c4cf9e/src/ajax/script.js%23L18"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[1.4.0, 1.12.0)",
            "(1.12.3, 3.0.0-beta1)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@0.0.0",
          "jQuery@1.10.2"
        ],
        "upgradePath": [
          false,
          "jQuery@1.12.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jQuery",
        "version": "1.10.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2022-04-24T08:33:35.726602Z",
        "credit": [
          "Gil Mirmovitch"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Insecure Defaults due to improper handling of StackOverFlow exception (SOE) whenever nested expressions are being processed. Exploiting this vulnerability results in Denial Of Service (DoS), and it is exploitable when an attacker sends 5 requests that cause SOE in time frame of 5 minutes.\r\n\r\n**Note:**\r\nThis vulnerability is only applicable to systems deployed on IIS (Internet Information Services) web-server\r\n\r\n## PoC:\r\n\r\n```js\r\n\r\nusing System;\r\n\r\nusing System.IO;\r\n\r\nusing System.Linq;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Newtonsoft.Json.Linq;\r\n\r\n\r\nnamespace JsonTests\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            //Create a string representation of an highly nested object (JSON serialized)\r\n            int nRep = 24000;\r\n            string json = string.Concat(Enumerable.Repeat(\"{a:\", nRep)) + \"1\" +\r\n                          string.Concat(Enumerable.Repeat(\"}\", nRep));\r\n\r\n            //Parse this object (Parsing works well - no exception is being thrown)\r\n            var parsedJson = JObject.Parse(json);\r\n            \r\n            using (var ms = new MemoryStream())\r\n            using (var sWriter = new StreamWriter(ms))\r\n            using (var jWriter = new JsonTextWriter(sWriter))\r\n            {\r\n                //Trying to serialize the object will result in StackOverflowException !!!\r\n                parsedJson.WriteTo(jWriter);\r\n            }\r\n\r\n            //ToString throws StackOverflowException as well  (ToString is very unefficient - even for smaller payloads, it will occupy a lot of CPU & Memory)\r\n            //parsedJson.ToString();\r\n\r\n            //JsonConvert.SerializeObject throws StackOverflowException as well\r\n            //string a = JsonConvert.SerializeObject(parsedJson);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n```\n## Remediation\nUpgrade `Newtonsoft.Json` to version 13.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66)\n- [GitHub Issue](https://github.com/JamesNK/Newtonsoft.Json/issues/2457)\n- [GitHub PR](https://github.com/JamesNK/Newtonsoft.Json/pull/2462)\n- [Security Advisory](https://alephsecurity.com/vulns/aleph-2018004)\n- [Security Article](https://alephsecurity.com/2018/10/22/StackOverflowException/)\n",
        "disclosureTime": "2022-04-24T08:33:33Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "13.0.1"
        ],
        "id": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
        "identifiers": {
          "CWE": [
            "CWE-755"
          ],
          "GHSA": [
            "GHSA-5crp-9r3c-p9vr"
          ],
          "CVE": []
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-08-08T07:46:17.314095Z",
        "moduleName": "newtonsoft.json",
        "packageManager": "nuget",
        "packageName": "Newtonsoft.Json",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-24T10:58:25Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/issues/2457"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/pull/2462"
          },
          {
            "title": "Security Advisory",
            "url": "https://alephsecurity.com/vulns/aleph-2018004"
          },
          {
            "title": "Security Article",
            "url": "https://alephsecurity.com/2018/10/22/StackOverflowException/"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Insecure Defaults",
        "insights": {
          "triageAdvice": "This vulnerability is only applicable on systems deployed on IIS (Internet Information Services) web-server"
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,13.0.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@0.0.0",
          "Newtonsoft.Json@6.0.4"
        ],
        "upgradePath": [
          false,
          "Newtonsoft.Json@13.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "Newtonsoft.Json",
        "version": "6.0.4"
      }
    ],
    "ok": false,
    "dependencyCount": 109,
    "org": "puma-security",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "9 vulnerable dependency paths",
    "remediation": {
      "unresolved": [],
      "upgrade": {
        "Newtonsoft.Json@6.0.4": {
          "upgradeTo": "Newtonsoft.Json@13.0.1",
          "upgrades": [
            "Newtonsoft.Json@6.0.4"
          ],
          "vulns": [
            "SNYK-DOTNET-NEWTONSOFTJSON-2774678"
          ]
        },
        "bootstrap@3.0.0": {
          "upgradeTo": "bootstrap@3.4.1",
          "upgrades": [
            "bootstrap@3.0.0",
            "bootstrap@3.0.0",
            "bootstrap@3.0.0",
            "bootstrap@3.0.0"
          ],
          "vulns": [
            "SNYK-DOTNET-BOOTSTRAP-450216",
            "SNYK-DOTNET-BOOTSTRAP-450234",
            "SNYK-DOTNET-BOOTSTRAP-450235",
            "SNYK-DOTNET-BOOTSTRAP-450236"
          ]
        },
        "jQuery@1.10.2": {
          "upgradeTo": "jQuery@3.5.0",
          "upgrades": [
            "jQuery@1.10.2",
            "jQuery@1.10.2",
            "jQuery@1.10.2",
            "jQuery@1.10.2"
          ],
          "vulns": [
            "SNYK-DOTNET-JQUERY-565440",
            "SNYK-DOTNET-JQUERY-450226",
            "SNYK-DOTNET-JQUERY-450227",
            "SNYK-DOTNET-JQUERY-60118"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 9,
    "targetFile": "src/Skunk/packages.config",
    "projectName": "puma-prey",
    "foundProjectCount": 8,
    "displayTargetFile": "src/Skunk/packages.config",
    "path": "/Users/test/source/puma/puma-prey"
  },
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "disclosureTime": "2022-03-18T12:24:05Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.2.6"
        ],
        "id": "SNYK-JS-MINIMIST-2429795",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ],
          "CVE": [
            "CVE-2021-44906"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-06T12:01:22.204194Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-03-21T12:09:35Z",
        "references": [
          {
            "title": "Fix Commit",
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/substack/minimist/issues/164"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "severity": "medium",
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "severity": "critical",
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "severity": "high",
            "modificationTime": "2022-09-09T14:34:39.695665Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "severityWithCritical": "low",
        "from": [
          "squirrel@0.0.0",
          "jest-editor-support@30.0.2",
          "jest-snapshot@27.4.6",
          "@babel/core@7.14.8",
          "json5@2.2.0",
          "minimist@1.2.5"
        ],
        "upgradePath": [
          false,
          "jest-editor-support@30.0.2",
          "jest-snapshot@27.4.6",
          "@babel/core@7.14.8",
          "json5@2.2.0",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "1.2.5"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "disclosureTime": "2022-03-18T12:24:05Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.2.6"
        ],
        "id": "SNYK-JS-MINIMIST-2429795",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ],
          "CVE": [
            "CVE-2021-44906"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-06T12:01:22.204194Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-03-21T12:09:35Z",
        "references": [
          {
            "title": "Fix Commit",
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/substack/minimist/issues/164"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "severity": "medium",
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "severity": "critical",
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "severity": "high",
            "modificationTime": "2022-09-09T14:34:39.695665Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "severityWithCritical": "low",
        "from": [
          "squirrel@0.0.0",
          "jest-editor-support@30.0.2",
          "jest-snapshot@27.4.6",
          "@jest/transform@27.4.6",
          "@babel/core@7.14.8",
          "json5@2.2.0",
          "minimist@1.2.5"
        ],
        "upgradePath": [
          false,
          "jest-editor-support@30.0.2",
          "jest-snapshot@27.4.6",
          "@jest/transform@27.4.6",
          "@babel/core@7.14.8",
          "json5@2.2.0",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "1.2.5"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "disclosureTime": "2022-03-18T12:24:05Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.2.6"
        ],
        "id": "SNYK-JS-MINIMIST-2429795",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ],
          "CVE": [
            "CVE-2021-44906"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-06T12:01:22.204194Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-03-21T12:09:35Z",
        "references": [
          {
            "title": "Fix Commit",
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/substack/minimist/issues/164"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "severity": "medium",
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "severity": "critical",
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "severity": "high",
            "modificationTime": "2022-09-09T14:34:39.695665Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "severityWithCritical": "low",
        "from": [
          "squirrel@0.0.0",
          "jest-editor-support@30.0.2",
          "jest-snapshot@27.4.6",
          "@jest/transform@27.4.6",
          "babel-plugin-istanbul@6.1.1",
          "istanbul-lib-instrument@5.1.0",
          "@babel/core@7.14.8",
          "json5@2.2.0",
          "minimist@1.2.5"
        ],
        "upgradePath": [
          false,
          "jest-editor-support@30.0.2",
          "jest-snapshot@27.4.6",
          "@jest/transform@27.4.6",
          "babel-plugin-istanbul@6.1.1",
          "istanbul-lib-instrument@5.1.0",
          "@babel/core@7.14.8",
          "json5@2.2.0",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "1.2.5"
      }
    ],
    "ok": false,
    "dependencyCount": 178,
    "org": "puma-security",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "3 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "alternativeIds": [],
          "creationTime": "2022-03-18T13:02:08.840039Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 3.7,
          "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
          "disclosureTime": "2022-03-18T12:24:05Z",
          "exploit": "Proof of Concept",
          "functions": [],
          "fixedIn": [
            "1.2.6"
          ],
          "id": "SNYK-JS-MINIMIST-2429795",
          "identifiers": {
            "CWE": [
              "CWE-1321"
            ],
            "SNYK": [
              "SNYK-JS-MINIMIST-559764"
            ],
            "CVE": [
              "CVE-2021-44906"
            ]
          },
          "language": "js",
          "malicious": false,
          "modificationTime": "2022-06-06T12:01:22.204194Z",
          "moduleName": "minimist",
          "packageManager": "npm",
          "packageName": "minimist",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2022-03-21T12:09:35Z",
          "references": [
            {
              "title": "Fix Commit",
              "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/substack/minimist/issues/164"
            },
            {
              "title": "Vulnerable Code",
              "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
            }
          ],
          "severity": "low",
          "socialTrendAlert": false,
          "title": "Prototype Pollution",
          "insights": {
            "triageAdvice": null
          },
          "cvssDetails": [
            {
              "assigner": "SUSE",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
              "cvssV3BaseScore": 5.6,
              "severity": "medium",
              "modificationTime": "2022-05-18T11:05:33.152638Z"
            },
            {
              "assigner": "NVD",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "severity": "critical",
              "modificationTime": "2022-04-13T01:10:15.021168Z"
            },
            {
              "assigner": "RHEL",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 8.1,
              "severity": "high",
              "modificationTime": "2022-09-09T14:34:39.695665Z"
            }
          ],
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "<1.2.6"
            ]
          },
          "from": [
            "squirrel@0.0.0",
            "jest-editor-support@30.0.2",
            "jest-snapshot@27.4.6",
            "@jest/transform@27.4.6",
            "babel-plugin-istanbul@6.1.1",
            "istanbul-lib-instrument@5.1.0",
            "@babel/core@7.14.8",
            "json5@2.2.0",
            "minimist@1.2.5"
          ],
          "upgradePath": [
            false,
            "jest-editor-support@30.0.2",
            "jest-snapshot@27.4.6",
            "@jest/transform@27.4.6",
            "babel-plugin-istanbul@6.1.1",
            "istanbul-lib-instrument@5.1.0",
            "@babel/core@7.14.8",
            "json5@2.2.0",
            "minimist@1.2.6"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "minimist",
          "version": "1.2.5",
          "severityWithCritical": "low"
        }
      ],
      "upgrade": {},
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 1,
    "projectName": "squirrel",
    "foundProjectCount": 8,
    "displayTargetFile": "src/Squirrel/package-lock.json",
    "path": "/Users/test/source/puma/puma-prey"
  },
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2022-04-24T08:33:35.726602Z",
        "credit": [
          "Gil Mirmovitch"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Insecure Defaults due to improper handling of StackOverFlow exception (SOE) whenever nested expressions are being processed. Exploiting this vulnerability results in Denial Of Service (DoS), and it is exploitable when an attacker sends 5 requests that cause SOE in time frame of 5 minutes.\r\n\r\n**Note:**\r\nThis vulnerability is only applicable to systems deployed on IIS (Internet Information Services) web-server\r\n\r\n## PoC:\r\n\r\n```js\r\n\r\nusing System;\r\n\r\nusing System.IO;\r\n\r\nusing System.Linq;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Newtonsoft.Json.Linq;\r\n\r\n\r\nnamespace JsonTests\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            //Create a string representation of an highly nested object (JSON serialized)\r\n            int nRep = 24000;\r\n            string json = string.Concat(Enumerable.Repeat(\"{a:\", nRep)) + \"1\" +\r\n                          string.Concat(Enumerable.Repeat(\"}\", nRep));\r\n\r\n            //Parse this object (Parsing works well - no exception is being thrown)\r\n            var parsedJson = JObject.Parse(json);\r\n            \r\n            using (var ms = new MemoryStream())\r\n            using (var sWriter = new StreamWriter(ms))\r\n            using (var jWriter = new JsonTextWriter(sWriter))\r\n            {\r\n                //Trying to serialize the object will result in StackOverflowException !!!\r\n                parsedJson.WriteTo(jWriter);\r\n            }\r\n\r\n            //ToString throws StackOverflowException as well  (ToString is very unefficient - even for smaller payloads, it will occupy a lot of CPU & Memory)\r\n            //parsedJson.ToString();\r\n\r\n            //JsonConvert.SerializeObject throws StackOverflowException as well\r\n            //string a = JsonConvert.SerializeObject(parsedJson);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n```\n## Remediation\nUpgrade `Newtonsoft.Json` to version 13.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66)\n- [GitHub Issue](https://github.com/JamesNK/Newtonsoft.Json/issues/2457)\n- [GitHub PR](https://github.com/JamesNK/Newtonsoft.Json/pull/2462)\n- [Security Advisory](https://alephsecurity.com/vulns/aleph-2018004)\n- [Security Article](https://alephsecurity.com/2018/10/22/StackOverflowException/)\n",
        "disclosureTime": "2022-04-24T08:33:33Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "13.0.1"
        ],
        "id": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
        "identifiers": {
          "CWE": [
            "CWE-755"
          ],
          "GHSA": [
            "GHSA-5crp-9r3c-p9vr"
          ],
          "CVE": []
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-08-08T07:46:17.314095Z",
        "moduleName": "newtonsoft.json",
        "packageManager": "nuget",
        "packageName": "Newtonsoft.Json",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-24T10:58:25Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/issues/2457"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/JamesNK/Newtonsoft.Json/pull/2462"
          },
          {
            "title": "Security Advisory",
            "url": "https://alephsecurity.com/vulns/aleph-2018004"
          },
          {
            "title": "Security Article",
            "url": "https://alephsecurity.com/2018/10/22/StackOverflowException/"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Insecure Defaults",
        "insights": {
          "triageAdvice": "This vulnerability is only applicable on systems deployed on IIS (Internet Information Services) web-server"
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,13.0.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "Microsoft.NET.Test.Sdk@16.9.4",
          "Microsoft.TestPlatform.TestHost@16.9.4",
          "Newtonsoft.Json@9.0.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Newtonsoft.Json",
        "version": "9.0.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "David Fernandez"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
        "disclosureTime": "2017-05-09T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
        "identifiers": {
          "CWE": [
            "CWE-254"
          ],
          "CVE": [
            "CVE-2017-0247"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.708862Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-09T00:00:00Z",
        "references": [
          {
            "title": "David Fernandez Blog",
            "url": "https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0247"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:28.287935Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3.0,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.assert@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Joonwoo Yu",
          "Hyoung-Kee Choi"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
        "identifiers": {
          "CWE": [
            "CWE-287"
          ],
          "CVE": [
            "CVE-2017-0248"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.783290Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0248"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Certificate Validation",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:28.366420Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.assert@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
        "identifiers": {
          "CWE": [
            "CWE-269"
          ],
          "CVE": [
            "CVE-2017-0249"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-10-09T14:33:54.951128Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Privilege Escalation",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:27.462242Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.assert@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Mikhail Shcherbakov"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2017-0256"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.613538Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0256"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authentication Bypass",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:10:30.808290Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.assert@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2018-10-11T06:50:22.411410Z",
        "credit": [
          "leecow"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
        "disclosureTime": "2018-10-09T22:51:18Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.20710",
          "4.0.1-beta-23225",
          "4.1.4",
          "4.3.4"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "GHSA": [
            "GHSA-7jgj-8wvc-jh57"
          ],
          "CVE": [
            "CVE-2018-8292"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-14T06:22:44.080361Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-10-10T15:24:52Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/88"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:31:54.871479Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[2.0.20126.16343, 2.0.20710)",
            "[4.0.0,4.0.1-beta-23225)",
            "[4.1.0,4.1.4)",
            "[4.3.0,4.3.4)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.assert@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "David Fernandez"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
        "disclosureTime": "2017-05-09T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
        "identifiers": {
          "CWE": [
            "CWE-254"
          ],
          "CVE": [
            "CVE-2017-0247"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.708862Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-09T00:00:00Z",
        "references": [
          {
            "title": "David Fernandez Blog",
            "url": "https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0247"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:28.287935Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3.0,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Joonwoo Yu",
          "Hyoung-Kee Choi"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
        "identifiers": {
          "CWE": [
            "CWE-287"
          ],
          "CVE": [
            "CVE-2017-0248"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.783290Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0248"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Certificate Validation",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:28.366420Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
        "identifiers": {
          "CWE": [
            "CWE-269"
          ],
          "CVE": [
            "CVE-2017-0249"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-10-09T14:33:54.951128Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Privilege Escalation",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:27.462242Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Mikhail Shcherbakov"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2017-0256"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.613538Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0256"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authentication Bypass",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:10:30.808290Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2018-10-11T06:50:22.411410Z",
        "credit": [
          "leecow"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
        "disclosureTime": "2018-10-09T22:51:18Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.20710",
          "4.0.1-beta-23225",
          "4.1.4",
          "4.3.4"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "GHSA": [
            "GHSA-7jgj-8wvc-jh57"
          ],
          "CVE": [
            "CVE-2018-8292"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-14T06:22:44.080361Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-10-10T15:24:52Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/88"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:31:54.871479Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[2.0.20126.16343, 2.0.20710)",
            "[4.0.0,4.0.1-beta-23225)",
            "[4.1.0,4.1.4)",
            "[4.3.0,4.3.4)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "David Fernandez"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
        "disclosureTime": "2017-05-09T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
        "identifiers": {
          "CWE": [
            "CWE-254"
          ],
          "CVE": [
            "CVE-2017-0247"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.708862Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-09T00:00:00Z",
        "references": [
          {
            "title": "David Fernandez Blog",
            "url": "https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0247"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:28.287935Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3.0,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Joonwoo Yu",
          "Hyoung-Kee Choi"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
        "identifiers": {
          "CWE": [
            "CWE-287"
          ],
          "CVE": [
            "CVE-2017-0248"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.783290Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0248"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Certificate Validation",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:28.366420Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
        "identifiers": {
          "CWE": [
            "CWE-269"
          ],
          "CVE": [
            "CVE-2017-0249"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-10-09T14:33:54.951128Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Privilege Escalation",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:27.462242Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Mikhail Shcherbakov"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2017-0256"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.613538Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0256"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authentication Bypass",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:10:30.808290Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2018-10-11T06:50:22.411410Z",
        "credit": [
          "leecow"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
        "disclosureTime": "2018-10-09T22:51:18Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.20710",
          "4.0.1-beta-23225",
          "4.1.4",
          "4.3.4"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "GHSA": [
            "GHSA-7jgj-8wvc-jh57"
          ],
          "CVE": [
            "CVE-2018-8292"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-14T06:22:44.080361Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-10-10T15:24:52Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/88"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:31:54.871479Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[2.0.20126.16343, 2.0.20710)",
            "[4.0.0,4.0.1-beta-23225)",
            "[4.1.0,4.1.4)",
            "[4.3.0,4.3.4)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "David Fernandez"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
        "disclosureTime": "2017-05-09T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
        "identifiers": {
          "CWE": [
            "CWE-254"
          ],
          "CVE": [
            "CVE-2017-0247"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.708862Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-09T00:00:00Z",
        "references": [
          {
            "title": "David Fernandez Blog",
            "url": "https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0247"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:28.287935Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3.0,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Joonwoo Yu",
          "Hyoung-Kee Choi"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
        "identifiers": {
          "CWE": [
            "CWE-287"
          ],
          "CVE": [
            "CVE-2017-0248"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.783290Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0248"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Certificate Validation",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:28.366420Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
        "identifiers": {
          "CWE": [
            "CWE-269"
          ],
          "CVE": [
            "CVE-2017-0249"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-10-09T14:33:54.951128Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Privilege Escalation",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "severity": "high",
            "modificationTime": "2022-01-03T16:10:27.462242Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Mikhail Shcherbakov"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2017-0256"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.613538Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0256"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authentication Bypass",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:10:30.808290Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2018-10-11T06:50:22.411410Z",
        "credit": [
          "leecow"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
        "disclosureTime": "2018-10-09T22:51:18Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.20710",
          "4.0.1-beta-23225",
          "4.1.4",
          "4.3.4"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "GHSA": [
            "GHSA-7jgj-8wvc-jh57"
          ],
          "CVE": [
            "CVE-2018-8292"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-14T06:22:44.080361Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-10-10T15:24:52Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/88"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T16:31:54.871479Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[2.0.20126.16343, 2.0.20710)",
            "[4.0.0,4.0.1-beta-23225)",
            "[4.1.0,4.1.4)",
            "[4.3.0,4.3.4)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "Microsoft.NET.Test.Sdk@16.9.4",
          "Microsoft.TestPlatform.TestHost@16.9.4",
          "Newtonsoft.Json@9.0.1",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.assert@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "Microsoft.NET.Test.Sdk@16.9.4",
          "Microsoft.TestPlatform.TestHost@16.9.4",
          "Newtonsoft.Json@9.0.1",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.assert@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "Microsoft.NET.Test.Sdk@16.9.4",
          "Microsoft.TestPlatform.TestHost@16.9.4",
          "Newtonsoft.Json@9.0.1",
          "System.Xml.XDocument@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.assert@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.XDocument@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.XDocument@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.XDocument@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-01-03T17:53:25.791016Z"
          },
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-09-01T15:24:20.294610Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "puma-prey@1.0.0",
          "xunit@2.4.1",
          "xunit.core@2.4.1",
          "xunit.extensibility.execution@2.4.1",
          "xunit.extensibility.core@2.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.XDocument@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      }
    ],
    "ok": false,
    "dependencyCount": 123,
    "org": "puma-security",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "36 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
          "alternativeIds": [],
          "creationTime": "2022-04-24T08:33:35.726602Z",
          "credit": [
            "Gil Mirmovitch"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n\nAffected versions of this package are vulnerable to Insecure Defaults due to improper handling of StackOverFlow exception (SOE) whenever nested expressions are being processed. Exploiting this vulnerability results in Denial Of Service (DoS), and it is exploitable when an attacker sends 5 requests that cause SOE in time frame of 5 minutes.\r\n\r\n**Note:**\r\nThis vulnerability is only applicable to systems deployed on IIS (Internet Information Services) web-server\r\n\r\n## PoC:\r\n\r\n```js\r\n\r\nusing System;\r\n\r\nusing System.IO;\r\n\r\nusing System.Linq;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Newtonsoft.Json.Linq;\r\n\r\n\r\nnamespace JsonTests\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            //Create a string representation of an highly nested object (JSON serialized)\r\n            int nRep = 24000;\r\n            string json = string.Concat(Enumerable.Repeat(\"{a:\", nRep)) + \"1\" +\r\n                          string.Concat(Enumerable.Repeat(\"}\", nRep));\r\n\r\n            //Parse this object (Parsing works well - no exception is being thrown)\r\n            var parsedJson = JObject.Parse(json);\r\n            \r\n            using (var ms = new MemoryStream())\r\n            using (var sWriter = new StreamWriter(ms))\r\n            using (var jWriter = new JsonTextWriter(sWriter))\r\n            {\r\n                //Trying to serialize the object will result in StackOverflowException !!!\r\n                parsedJson.WriteTo(jWriter);\r\n            }\r\n\r\n            //ToString throws StackOverflowException as well  (ToString is very unefficient - even for smaller payloads, it will occupy a lot of CPU & Memory)\r\n            //parsedJson.ToString();\r\n\r\n            //JsonConvert.SerializeObject throws StackOverflowException as well\r\n            //string a = JsonConvert.SerializeObject(parsedJson);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n```\n## Remediation\nUpgrade `Newtonsoft.Json` to version 13.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66)\n- [GitHub Issue](https://github.com/JamesNK/Newtonsoft.Json/issues/2457)\n- [GitHub PR](https://github.com/JamesNK/Newtonsoft.Json/pull/2462)\n- [Security Advisory](https://alephsecurity.com/vulns/aleph-2018004)\n- [Security Article](https://alephsecurity.com/2018/10/22/StackOverflowException/)\n",
          "disclosureTime": "2022-04-24T08:33:33Z",
          "exploit": "Proof of Concept",
          "functions": [],
          "fixedIn": [
            "13.0.1"
          ],
          "id": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
          "identifiers": {
            "CWE": [
              "CWE-755"
            ],
            "GHSA": [
              "GHSA-5crp-9r3c-p9vr"
            ],
            "CVE": []
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2022-08-08T07:46:17.314095Z",
          "moduleName": "newtonsoft.json",
          "packageManager": "nuget",
          "packageName": "Newtonsoft.Json",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2022-04-24T10:58:25Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/JamesNK/Newtonsoft.Json/issues/2457"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/JamesNK/Newtonsoft.Json/pull/2462"
            },
            {
              "title": "Security Advisory",
              "url": "https://alephsecurity.com/vulns/aleph-2018004"
            },
            {
              "title": "Security Article",
              "url": "https://alephsecurity.com/2018/10/22/StackOverflowException/"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Insecure Defaults",
          "insights": {
            "triageAdvice": "This vulnerability is only applicable on systems deployed on IIS (Internet Information Services) web-server"
          },
          "cvssDetails": [],
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,13.0.1)"
            ]
          },
          "from": [
            "puma-prey@1.0.0",
            "Microsoft.NET.Test.Sdk@16.9.4",
            "Microsoft.TestPlatform.TestHost@16.9.4",
            "Newtonsoft.Json@9.0.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "Newtonsoft.Json",
          "version": "9.0.1",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
          "alternativeIds": [],
          "creationTime": "2017-07-19T00:00:00Z",
          "credit": [
            "David Fernandez"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
          "disclosureTime": "2017-05-09T00:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.1.2",
            "4.3.2"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
          "identifiers": {
            "CWE": [
              "CWE-254"
            ],
            "CVE": [
              "CVE-2017-0247"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2021-08-24T14:49:07.708862Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2017-05-09T00:00:00Z",
          "references": [
            {
              "title": "David Fernandez Blog",
              "url": "https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/aspnet/Announcements/issues/239"
            },
            {
              "title": "Microsoft Security Advisory",
              "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/2017-0247"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Denial of Service (DoS)",
          "insights": {
            "triageAdvice": null
          },
          "cvssDetails": [
            {
              "assigner": "NVD",
              "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
              "cvssV3BaseScore": 7.5,
              "severity": "high",
              "modificationTime": "2022-01-03T16:10:28.287935Z"
            }
          ],
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,4.1.2)",
              "[4.3.0,4.3.2)"
            ]
          },
          "from": [
            "puma-prey@1.0.0",
            "xunit@2.4.1",
            "xunit.core@2.4.1",
            "xunit.extensibility.execution@2.4.1",
            "xunit.extensibility.core@2.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
          "alternativeIds": [],
          "creationTime": "2017-07-19T00:00:00Z",
          "credit": [
            "Joonwoo Yu",
            "Hyoung-Kee Choi"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
          "disclosureTime": "2017-05-12T00:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.1.2",
            "4.3.2"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
          "identifiers": {
            "CWE": [
              "CWE-287"
            ],
            "CVE": [
              "CVE-2017-0248"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2021-08-24T14:49:07.783290Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2017-05-12T00:00:00Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/aspnet/Announcements/issues/239"
            },
            {
              "title": "Microsoft Security Advisory",
              "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/2017-0248"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Improper Certificate Validation",
          "insights": {
            "triageAdvice": null
          },
          "cvssDetails": [
            {
              "assigner": "NVD",
              "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
              "cvssV3BaseScore": 7.5,
              "severity": "high",
              "modificationTime": "2022-01-03T16:10:28.366420Z"
            }
          ],
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,4.1.2)",
              "[4.3,4.3.2)"
            ]
          },
          "from": [
            "puma-prey@1.0.0",
            "xunit@2.4.1",
            "xunit.core@2.4.1",
            "xunit.extensibility.execution@2.4.1",
            "xunit.extensibility.core@2.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "alternativeIds": [],
          "creationTime": "2017-07-19T00:00:00Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 7.3,
          "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
          "disclosureTime": "2017-05-12T00:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.1.2",
            "4.3.2"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
          "identifiers": {
            "CWE": [
              "CWE-269"
            ],
            "CVE": [
              "CVE-2017-0249"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2021-10-09T14:33:54.951128Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2017-05-12T00:00:00Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/aspnet/Announcements/issues/239"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Privilege Escalation",
          "insights": {
            "triageAdvice": null
          },
          "cvssDetails": [
            {
              "assigner": "NVD",
              "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
              "cvssV3BaseScore": 7.3,
              "severity": "high",
              "modificationTime": "2022-01-03T16:10:27.462242Z"
            }
          ],
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,4.1.2)",
              "[4.3,4.3.2)"
            ]
          },
          "from": [
            "puma-prey@1.0.0",
            "xunit@2.4.1",
            "xunit.core@2.4.1",
            "xunit.extensibility.execution@2.4.1",
            "xunit.extensibility.core@2.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "alternativeIds": [],
          "creationTime": "2017-07-19T00:00:00Z",
          "credit": [
            "Mikhail Shcherbakov"
          ],
          "cvssScore": 5.3,
          "description": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
          "disclosureTime": "2017-05-12T00:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.1.2",
            "4.3.2"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
          "identifiers": {
            "CWE": [
              "CWE-20"
            ],
            "CVE": [
              "CVE-2017-0256"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2021-08-24T14:49:07.613538Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2017-05-12T00:00:00Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/aspnet/Announcements/issues/239"
            },
            {
              "title": "Microsoft Security Advisory",
              "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/2017-0256"
            }
          ],
          "severity": "medium",
          "socialTrendAlert": false,
          "title": "Authentication Bypass",
          "insights": {
            "triageAdvice": null
          },
          "cvssDetails": [
            {
              "assigner": "NVD",
              "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
              "cvssV3BaseScore": 5.3,
              "severity": "medium",
              "modificationTime": "2022-01-03T16:10:30.808290Z"
            }
          ],
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,4.1.2)",
              "[4.3,4.3.2)"
            ]
          },
          "from": [
            "puma-prey@1.0.0",
            "xunit@2.4.1",
            "xunit.core@2.4.1",
            "xunit.extensibility.execution@2.4.1",
            "xunit.extensibility.core@2.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "medium"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
          "alternativeIds": [],
          "creationTime": "2018-10-11T06:50:22.411410Z",
          "credit": [
            "leecow"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
          "disclosureTime": "2018-10-09T22:51:18Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "2.0.20710",
            "4.0.1-beta-23225",
            "4.1.4",
            "4.3.4"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
          "identifiers": {
            "CWE": [
              "CWE-200"
            ],
            "GHSA": [
              "GHSA-7jgj-8wvc-jh57"
            ],
            "CVE": [
              "CVE-2018-8292"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2022-06-14T06:22:44.080361Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2018-10-10T15:24:52Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/dotnet/announcements/issues/88"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Information Exposure",
          "insights": {
            "triageAdvice": null
          },
          "cvssDetails": [
            {
              "assigner": "NVD",
              "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
              "cvssV3BaseScore": 7.5,
              "severity": "high",
              "modificationTime": "2022-01-03T16:31:54.871479Z"
            }
          ],
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[2.0.20126.16343, 2.0.20710)",
              "[4.0.0,4.0.1-beta-23225)",
              "[4.1.0,4.1.4)",
              "[4.3.0,4.3.4)"
            ]
          },
          "from": [
            "puma-prey@1.0.0",
            "xunit@2.4.1",
            "xunit.core@2.4.1",
            "xunit.extensibility.execution@2.4.1",
            "xunit.extensibility.core@2.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2019-05-15T16:00:51.866263Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
          "disclosureTime": "2019-05-14T07:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.3.1"
          ],
          "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
          "identifiers": {
            "CWE": [
              "CWE-400"
            ],
            "CVE": [
              "CVE-2019-0820"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2020-12-14T14:40:55.968790Z",
          "moduleName": "system.text.regularexpressions",
          "packageManager": "nuget",
          "packageName": "System.Text.RegularExpressions",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2019-05-16T15:55:53Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/dotnet/announcements/issues/111"
            },
            {
              "title": "Microsoft Security Advisory",
              "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Regular Expression Denial of Service (ReDoS)",
          "insights": {
            "triageAdvice": null
          },
          "cvssDetails": [
            {
              "assigner": "NVD",
              "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "severity": "high",
              "modificationTime": "2022-01-03T17:53:25.791016Z"
            },
            {
              "assigner": "RHEL",
              "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "severity": "high",
              "modificationTime": "2022-09-01T15:24:20.294610Z"
            }
          ],
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[4.3.0, 4.3.1)"
            ]
          },
          "from": [
            "puma-prey@1.0.0",
            "xunit@2.4.1",
            "xunit.core@2.4.1",
            "xunit.extensibility.execution@2.4.1",
            "xunit.extensibility.core@2.4.1",
            "NETStandard.Library@1.6.1",
            "System.Xml.XDocument@4.3.0",
            "System.Xml.ReaderWriter@4.3.0",
            "System.Text.RegularExpressions@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Text.RegularExpressions",
          "version": "4.3.0",
          "severityWithCritical": "high"
        }
      ],
      "upgrade": {},
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 7,
    "targetFile": "test/Coyote.Tests/obj/project.assets.json",
    "projectName": "puma-prey",
    "foundProjectCount": 8,
    "displayTargetFile": "test/Coyote.Tests/obj/project.assets.json",
    "path": "/Users/test/source/puma/puma-prey"
  }
]