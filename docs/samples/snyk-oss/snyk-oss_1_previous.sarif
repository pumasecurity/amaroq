{
    "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
    "version": "2.1.0",
    "runs": [{
        "tool": {
            "driver": {
                "name": "SnykOpenSource",
                "fullName": "SnykOpenSource",
                "version": "1.0.0",
                "semanticVersion": "1.0.0",
                "informationUri": "https://docs.snyk.io/products/snyk-open-source",
                "rules": [{
                    "id": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
                    "name": "Newtonsoft.Json@10.0.3",
                    "fullDescription": {
                        "text": "## Overview\n\nAffected versions of this package are vulnerable to Insecure Defaults due to improper handling of StackOverFlow exception (SOE) whenever nested expressions are being processed. Exploiting this vulnerability results in Denial Of Service (DoS), and it is exploitable when an attacker sends 5 requests that cause SOE in time frame of 5 minutes.\r\n\r\n**Note:**\r\nThis vulnerability is only applicable to systems deployed on IIS (Internet Information Services) web-server\r\n\r\n## PoC:\r\n\r\n```js\r\n\r\nusing System;\r\n\r\nusing System.IO;\r\n\r\nusing System.Linq;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Newtonsoft.Json.Linq;\r\n\r\n\r\nnamespace JsonTests\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            //Create a string representation of an highly nested object (JSON serialized)\r\n            int nRep = 24000;\r\n            string json = string.Concat(Enumerable.Repeat(\"{a:\", nRep)) + \"1\" +\r\n                          string.Concat(Enumerable.Repeat(\"}\", nRep));\r\n\r\n            //Parse this object (Parsing works well - no exception is being thrown)\r\n            var parsedJson = JObject.Parse(json);\r\n            \r\n            using (var ms = new MemoryStream())\r\n            using (var sWriter = new StreamWriter(ms))\r\n            using (var jWriter = new JsonTextWriter(sWriter))\r\n            {\r\n                //Trying to serialize the object will result in StackOverflowException !!!\r\n                parsedJson.WriteTo(jWriter);\r\n            }\r\n\r\n            //ToString throws StackOverflowException as well  (ToString is very unefficient - even for smaller payloads, it will occupy a lot of CPU & Memory)\r\n            //parsedJson.ToString();\r\n\r\n            //JsonConvert.SerializeObject throws StackOverflowException as well\r\n            //string a = JsonConvert.SerializeObject(parsedJson);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n```\n## Remediation\nUpgrade `Newtonsoft.Json` to version 13.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66)\n- [GitHub Issue](https://github.com/JamesNK/Newtonsoft.Json/issues/2457)\n- [GitHub PR](https://github.com/JamesNK/Newtonsoft.Json/pull/2462)\n- [Security Advisory](https://alephsecurity.com/vulns/aleph-2018004)\n- [Security Article](https://alephsecurity.com/2018/10/22/StackOverflowException/)\n",
                        "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Insecure Defaults due to improper handling of StackOverFlow exception (SOE) whenever nested expressions are being processed. Exploiting this vulnerability results in Denial Of Service (DoS), and it is exploitable when an attacker sends 5 requests that cause SOE in time frame of 5 minutes.\r\n\r\n**Note:**\r\nThis vulnerability is only applicable to systems deployed on IIS (Internet Information Services) web-server\r\n\r\n## PoC:\r\n\r\n```js\r\n\r\nusing System;\r\n\r\nusing System.IO;\r\n\r\nusing System.Linq;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Newtonsoft.Json.Linq;\r\n\r\n\r\nnamespace JsonTests\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            //Create a string representation of an highly nested object (JSON serialized)\r\n            int nRep = 24000;\r\n            string json = string.Concat(Enumerable.Repeat(\"{a:\", nRep)) + \"1\" +\r\n                          string.Concat(Enumerable.Repeat(\"}\", nRep));\r\n\r\n            //Parse this object (Parsing works well - no exception is being thrown)\r\n            var parsedJson = JObject.Parse(json);\r\n            \r\n            using (var ms = new MemoryStream())\r\n            using (var sWriter = new StreamWriter(ms))\r\n            using (var jWriter = new JsonTextWriter(sWriter))\r\n            {\r\n                //Trying to serialize the object will result in StackOverflowException !!!\r\n                parsedJson.WriteTo(jWriter);\r\n            }\r\n\r\n            //ToString throws StackOverflowException as well  (ToString is very unefficient - even for smaller payloads, it will occupy a lot of CPU & Memory)\r\n            //parsedJson.ToString();\r\n\r\n            //JsonConvert.SerializeObject throws StackOverflowException as well\r\n            //string a = JsonConvert.SerializeObject(parsedJson);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n```\n## Remediation\nUpgrade `Newtonsoft.Json` to version 13.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66)\n- [GitHub Issue](https://github.com/JamesNK/Newtonsoft.Json/issues/2457)\n- [GitHub PR](https://github.com/JamesNK/Newtonsoft.Json/pull/2462)\n- [Security Advisory](https://alephsecurity.com/vulns/aleph-2018004)\n- [Security Article](https://alephsecurity.com/2018/10/22/StackOverflowException/)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Commit: https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66\nGitHub Issue: https://github.com/JamesNK/Newtonsoft.Json/issues/2457\nGitHub PR: https://github.com/JamesNK/Newtonsoft.Json/pull/2462\nSecurity Advisory: https://alephsecurity.com/vulns/aleph-2018004\nSecurity Article: https://alephsecurity.com/2018/10/22/StackOverflowException/\n\nTriage Advice:\nThis vulnerability is only applicable on systems deployed on IIS (Internet Information Services) web-server",
                        "markdown": "References:\nGitHub Commit: https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66\nGitHub Issue: https://github.com/JamesNK/Newtonsoft.Json/issues/2457\nGitHub PR: https://github.com/JamesNK/Newtonsoft.Json/pull/2462\nSecurity Advisory: https://alephsecurity.com/vulns/aleph-2018004\nSecurity Article: https://alephsecurity.com/2018/10/22/StackOverflowException/\n\nTriage Advice:\nThis vulnerability is only applicable on systems deployed on IIS (Internet Information Services) web-server"
                    },
                    "shortDescription": {
                        "text": "Insecure Defaults in Newtonsoft.Json@10.0.3",
                        "markdown": "Insecure Defaults in Newtonsoft.Json@10.0.3"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.5",
                        "tags": ["security", "nuget", "CWE-755"]
                    }
                }, {
                    "id": "SNYK-DOTNET-BOOTSTRAP-450216",
                    "name": "bootstrap@3.0.0",
                    "fullDescription": {
                        "text": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in` data-template`, `data-content ` and `data-title` properties of tooltip/popover.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.1, 4.3.1 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0)\n- [GitHub Commit](https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/28236)\n- [NPM Security Adviory](https://www.npmjs.com/advisories/891)\n",
                        "markdown": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in` data-template`, `data-content ` and `data-title` properties of tooltip/popover.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.1, 4.3.1 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0)\n- [GitHub Commit](https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/28236)\n- [NPM Security Adviory](https://www.npmjs.com/advisories/891)\n"
                    },
                    "help": {
                        "text": "References:\nBootstrap Blog: https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/\nGitHub Commit: https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0\nGitHub Commit: https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9\nGitHub Issue: https://github.com/twbs/bootstrap/issues/28236\nNPM Security Adviory: https://www.npmjs.com/advisories/891\n",
                        "markdown": "References:\nBootstrap Blog: https://blog.getbootstrap.com/2019/02/13/bootstrap-4-3-1-and-3-4-1/\nGitHub Commit: https://github.com/twbs/bootstrap/pull/28236/commits/5efa9b531d25927b907e3fa24b818608bc38a2f0\nGitHub Commit: https://github.com/twbs/bootstrap-rubygem/commit/a63d04c96d14e42492ccdba1d7f3d6ec1af022a9\nGitHub Issue: https://github.com/twbs/bootstrap/issues/28236\nNPM Security Adviory: https://www.npmjs.com/advisories/891\n"
                    },
                    "shortDescription": {
                        "text": "Cross-site Scripting (XSS) in bootstrap@3.0.0",
                        "markdown": "Cross-site Scripting (XSS) in bootstrap@3.0.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "6.5",
                        "tags": ["security", "nuget", "CWE-79"]
                    }
                }, {
                    "id": "SNYK-DOTNET-BOOTSTRAP-450234",
                    "name": "bootstrap@3.0.0",
                    "fullDescription": {
                        "text": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `tooltip`, `collapse` and `scrollspy` plugins.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 4.1.2, 3.4.0 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26625)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26627)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26628)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/26630)\n",
                        "markdown": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `tooltip`, `collapse` and `scrollspy` plugins.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 4.1.2, 3.4.0 or higher.\n## References\n- [Bootstrap Blog](https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621)\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26625)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26627)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26628)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/26630)\n"
                    },
                    "help": {
                        "text": "References:\nBootstrap Blog: https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/\nGitHub Commit: https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26625\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26627\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26628\nGitHub Issue: https://github.com/twbs/bootstrap/issues/27915%23issuecomment-452140906\nGitHub PR: https://github.com/twbs/bootstrap/pull/26630\n",
                        "markdown": "References:\nBootstrap Blog: https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/\nGitHub Commit: https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26625\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26627\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26628\nGitHub Issue: https://github.com/twbs/bootstrap/issues/27915%23issuecomment-452140906\nGitHub PR: https://github.com/twbs/bootstrap/pull/26630\n"
                    },
                    "shortDescription": {
                        "text": "Cross-site Scripting (XSS) in bootstrap@3.0.0",
                        "markdown": "Cross-site Scripting (XSS) in bootstrap@3.0.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "6.5",
                        "tags": ["security", "nuget", "CWE-79"]
                    }
                }, {
                    "id": "SNYK-DOTNET-BOOTSTRAP-450235",
                    "name": "bootstrap@3.0.0",
                    "fullDescription": {
                        "text": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `affix` configuration target property.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootstrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n- [POC: GitHub Issue](https://github.com/twbs/bootstrap/issues/27045)\n",
                        "markdown": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `affix` configuration target property.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootstrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n- [POC: GitHub Issue](https://github.com/twbs/bootstrap/issues/27045)\n"
                    },
                    "help": {
                        "text": "References:\nGetBootstrap Blog: https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/\nGitHub Commit: https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d\nGitHub PR: https://github.com/twbs/bootstrap/pull/27047\nPOC: GitHub Issue: https://github.com/twbs/bootstrap/issues/27045\n",
                        "markdown": "References:\nGetBootstrap Blog: https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/\nGitHub Commit: https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d\nGitHub PR: https://github.com/twbs/bootstrap/pull/27047\nPOC: GitHub Issue: https://github.com/twbs/bootstrap/issues/27045\n"
                    },
                    "shortDescription": {
                        "text": "Cross-site Scripting (XSS) in bootstrap@3.0.0",
                        "markdown": "Cross-site Scripting (XSS) in bootstrap@3.0.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "6.5",
                        "tags": ["security", "nuget", "CWE-79"]
                    }
                }, {
                    "id": "SNYK-DOTNET-BOOTSTRAP-450236",
                    "name": "bootstrap@3.0.0",
                    "fullDescription": {
                        "text": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the tooltip `data-viewport` attribute.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootsrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27044)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n",
                        "markdown": "## Overview\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the tooltip `data-viewport` attribute.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap` to version 3.4.0 or higher.\n## References\n- [GetBootsrap Blog](https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/)\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27044)\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/27047)\n"
                    },
                    "help": {
                        "text": "References:\nGetBootsrap Blog: https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/\nGitHub Issue: https://github.com/twbs/bootstrap/issues/27044\nGitHub PR: https://github.com/twbs/bootstrap/pull/27047\n",
                        "markdown": "References:\nGetBootsrap Blog: https://blog.getbootstrap.com/2018/12/13/bootstrap-3-4-0/\nGitHub Issue: https://github.com/twbs/bootstrap/issues/27044\nGitHub PR: https://github.com/twbs/bootstrap/pull/27047\n"
                    },
                    "shortDescription": {
                        "text": "Cross-site Scripting (XSS) in bootstrap@3.0.0",
                        "markdown": "Cross-site Scripting (XSS) in bootstrap@3.0.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "6.5",
                        "tags": ["security", "nuget", "CWE-79"]
                    }
                }, {
                    "id": "SNYK-DOTNET-JQUERY-450226",
                    "name": "jQuery@1.10.2",
                    "fullDescription": {
                        "text": "## Overview\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jQuery` to version 3.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\n- [Hackerone Report](https://hackerone.com/reports/454365)\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\n",
                        "markdown": "## Overview\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jQuery` to version 3.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\n- [Hackerone Report](https://hackerone.com/reports/454365)\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Commit: https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b\nGitHub PR: https://github.com/jquery/jquery/pull/4333\nHackerone Report: https://hackerone.com/reports/454365\nSnyk Blog: https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/\nThird-Party Backported Patches Repo: https://github.com/DanielRuf/snyk-js-jquery-174006\n",
                        "markdown": "References:\nGitHub Commit: https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b\nGitHub PR: https://github.com/jquery/jquery/pull/4333\nHackerone Report: https://hackerone.com/reports/454365\nSnyk Blog: https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/\nThird-Party Backported Patches Repo: https://github.com/DanielRuf/snyk-js-jquery-174006\n"
                    },
                    "shortDescription": {
                        "text": "Prototype Pollution in jQuery@1.10.2",
                        "markdown": "Prototype Pollution in jQuery@1.10.2"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "5.6",
                        "tags": ["security", "nuget", "CWE-1321"]
                    }
                }, {
                    "id": "SNYK-DOTNET-JQUERY-450227",
                    "name": "jQuery@1.10.2",
                    "fullDescription": {
                        "text": "## Overview\n\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nattacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\r\n\r\n**Note:** After being implemented in version 1.12.0, the fix of this vulnerability was reverted in 1.12.3, and then was only reintroduced in version 3.0.0-beta1. The fix was never released in any tag of the 2.x.x branch, as it was reverted out of the branch before being released.\n\n## Details\n A cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\r\n\r\n\u05bfInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \r\n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jQuery` to version 1.12.2, 3.0.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n\n- [GitHub Commit](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n",
                        "markdown": "## Overview\n\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nattacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\r\n\r\n**Note:** After being implemented in version 1.12.0, the fix of this vulnerability was reverted in 1.12.3, and then was only reintroduced in version 3.0.0-beta1. The fix was never released in any tag of the 2.x.x branch, as it was reverted out of the branch before being released.\n\n## Details\n A cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\r\n\r\n\u05bfInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \r\n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jQuery` to version 1.12.2, 3.0.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n\n- [GitHub Commit](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Commit: https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc\nGitHub Commit: https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2\nGitHub Issue: https://github.com/jquery/jquery/issues/2432\nGitHub PR: https://github.com/jquery/jquery/pull/2588\n",
                        "markdown": "References:\nGitHub Commit: https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc\nGitHub Commit: https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2\nGitHub Issue: https://github.com/jquery/jquery/issues/2432\nGitHub PR: https://github.com/jquery/jquery/pull/2588\n"
                    },
                    "shortDescription": {
                        "text": "Cross-site Scripting (XSS) in jQuery@1.10.2",
                        "markdown": "Cross-site Scripting (XSS) in jQuery@1.10.2"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "5.4",
                        "tags": ["security", "nuget", "CWE-79"]
                    }
                }, {
                    "id": "SNYK-DOTNET-JQUERY-565440",
                    "name": "jQuery@1.10.2",
                    "fullDescription": {
                        "text": "## Overview\n\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\r\n\r\n\u05bfInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \r\n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jQuery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw)\n",
                        "markdown": "## Overview\n\n[jQuery](https://www.nuget.org/packages/jQuery) is a nuget package provides jQuery for .NET applications.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\r\n\r\n\u05bfInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \r\n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jQuery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Commit: https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77\nPoC: https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html\nRelease Notes: https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/\nSecurity Blog: https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw\n",
                        "markdown": "References:\nGitHub Commit: https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77\nPoC: https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html\nRelease Notes: https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/\nSecurity Blog: https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw\n"
                    },
                    "shortDescription": {
                        "text": "Cross-site Scripting (XSS) in jQuery@1.10.2",
                        "markdown": "Cross-site Scripting (XSS) in jQuery@1.10.2"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "6.3",
                        "tags": ["security", "nuget", "CWE-79"]
                    }
                }, {
                    "id": "SNYK-DOTNET-JQUERY-60118",
                    "name": "jQuery@1.10.2",
                    "fullDescription": {
                        "text": "## Overview\n[`jquery`](https://www.nuget.org/packages/jQuery) is JavaScript library for DOM operations.\n\nAffected versions of the package are vulnerable to Cross-site Scripting (XSS) attacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\r\n\r\n\u05bfInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \r\n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\nUpgrade `jquery` to version `3.0.0` or higher.\n\n## References\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n- [GitHub Commit 3.0.0](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n- [GitHub Commit 1.12](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n- [Vulnerable code](https://github.com/jquery/jquery/blob/250a1990baa571de60325ab2c52eabb399c4cf9e/src/ajax/script.js#L18)\n",
                        "markdown": "## Overview\n[`jquery`](https://www.nuget.org/packages/jQuery) is JavaScript library for DOM operations.\n\nAffected versions of the package are vulnerable to Cross-site Scripting (XSS) attacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\r\n\r\n\u05bfInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \r\n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\nUpgrade `jquery` to version `3.0.0` or higher.\n\n## References\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n- [GitHub Commit 3.0.0](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n- [GitHub Commit 1.12](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n- [Vulnerable code](https://github.com/jquery/jquery/blob/250a1990baa571de60325ab2c52eabb399c4cf9e/src/ajax/script.js#L18)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Commit: https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc\nGitHub Commit: https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2\nGitHub Issue: https://github.com/jquery/jquery/issues/2432\nGitHub PR: https://github.com/jquery/jquery/pull/2588\nVulnerable code: https://github.com/jquery/jquery/blob/250a1990baa571de60325ab2c52eabb399c4cf9e/src/ajax/script.js%23L18\n",
                        "markdown": "References:\nGitHub Commit: https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc\nGitHub Commit: https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2\nGitHub Issue: https://github.com/jquery/jquery/issues/2432\nGitHub PR: https://github.com/jquery/jquery/pull/2588\nVulnerable code: https://github.com/jquery/jquery/blob/250a1990baa571de60325ab2c52eabb399c4cf9e/src/ajax/script.js%23L18\n"
                    },
                    "shortDescription": {
                        "text": "Cross-site Scripting (XSS) in jQuery@1.10.2",
                        "markdown": "Cross-site Scripting (XSS) in jQuery@1.10.2"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "5.4",
                        "tags": ["security", "nuget", "CWE-79"]
                    }
                }, {
                    "id": "SNYK-DOTNET-JQUERYVALIDATION-1056869",
                    "name": "jQuery.Validation@1.11.1",
                    "fullDescription": {
                        "text": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `url` method.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet\u2019s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `jQuery.Validation` to version 1.19.3 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery-validation/jquery-validation/pull/2371/commits/5e5641072312845b9130ed06f115816c8f0e6b3c)\n- [GitHub PR](https://github.com/jquery-validation/jquery-validation/pull/2371)\n",
                        "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `url` method.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet\u2019s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `jQuery.Validation` to version 1.19.3 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery-validation/jquery-validation/pull/2371/commits/5e5641072312845b9130ed06f115816c8f0e6b3c)\n- [GitHub PR](https://github.com/jquery-validation/jquery-validation/pull/2371)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Commit: https://github.com/jquery-validation/jquery-validation/pull/2371/commits/5e5641072312845b9130ed06f115816c8f0e6b3c\nGitHub PR: https://github.com/jquery-validation/jquery-validation/pull/2371\n",
                        "markdown": "References:\nGitHub Commit: https://github.com/jquery-validation/jquery-validation/pull/2371/commits/5e5641072312845b9130ed06f115816c8f0e6b3c\nGitHub PR: https://github.com/jquery-validation/jquery-validation/pull/2371\n"
                    },
                    "shortDescription": {
                        "text": "Regular Expression Denial of Service (ReDoS) in jQuery.Validation@1.11.1",
                        "markdown": "Regular Expression Denial of Service (ReDoS) in jQuery.Validation@1.11.1"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.5",
                        "tags": ["security", "nuget", "CWE-400"]
                    }
                }, {
                    "id": "SNYK-DOTNET-MICROSOFTOWIN-1019387",
                    "name": "Microsoft.Owin@3.0.1",
                    "fullDescription": {
                        "text": "## Overview\n[Microsoft.Owin](https://www.nuget.org/packages/Microsoft.Owin/) is a Provides a set of helper types and abstractions for simplifying the creation of OWIN components.\n\nAffected versions of this package are vulnerable to Security Bypass. The ASP.NET Core cookie parser decodes entire cookie strings which could allow a malicious attacker to set a second cookie with the name being percent encoded. The security update addresses the vulnerability by fixing the way the ASP.NET Core cookie parser handles encoded names. This CVE also affects `Microsoft.Owin` due to it using a similar cookie parsing mechanism.\n## Remediation\nUpgrade `Microsoft.Owin` to version 4.1.1 or higher.\n## References\n- [AspNetKatana Release Notes](https://github.com/aspnet/AspNetKatana/releases/tag/v4.1.1)\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/165)\n- [Microsoft.Owin PR](https://github.com/aspnet/AspNetKatana/pull/368)\n- [.NET 2.1 Release](https://dotnet.microsoft.com/download/dotnet-core/2.1)\n- [.NET 3.1 Release](https://dotnet.microsoft.com/download/dotnet-core/3.1)\n",
                        "markdown": "## Overview\n[Microsoft.Owin](https://www.nuget.org/packages/Microsoft.Owin/) is a Provides a set of helper types and abstractions for simplifying the creation of OWIN components.\n\nAffected versions of this package are vulnerable to Security Bypass. The ASP.NET Core cookie parser decodes entire cookie strings which could allow a malicious attacker to set a second cookie with the name being percent encoded. The security update addresses the vulnerability by fixing the way the ASP.NET Core cookie parser handles encoded names. This CVE also affects `Microsoft.Owin` due to it using a similar cookie parsing mechanism.\n## Remediation\nUpgrade `Microsoft.Owin` to version 4.1.1 or higher.\n## References\n- [AspNetKatana Release Notes](https://github.com/aspnet/AspNetKatana/releases/tag/v4.1.1)\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/165)\n- [Microsoft.Owin PR](https://github.com/aspnet/AspNetKatana/pull/368)\n- [.NET 2.1 Release](https://dotnet.microsoft.com/download/dotnet-core/2.1)\n- [.NET 3.1 Release](https://dotnet.microsoft.com/download/dotnet-core/3.1)\n"
                    },
                    "help": {
                        "text": "References:\nAspNetKatana Release Notes: https://github.com/aspnet/AspNetKatana/releases/tag/v4.1.1\nGitHub Issue: https://github.com/dotnet/announcements/issues/165\nMicrosoft.Owin PR: https://github.com/aspnet/AspNetKatana/pull/368\n.NET 2.1 Release: https://dotnet.microsoft.com/download/dotnet-core/2.1\n.NET 3.1 Release: https://dotnet.microsoft.com/download/dotnet-core/3.1\n",
                        "markdown": "References:\nAspNetKatana Release Notes: https://github.com/aspnet/AspNetKatana/releases/tag/v4.1.1\nGitHub Issue: https://github.com/dotnet/announcements/issues/165\nMicrosoft.Owin PR: https://github.com/aspnet/AspNetKatana/pull/368\n.NET 2.1 Release: https://dotnet.microsoft.com/download/dotnet-core/2.1\n.NET 3.1 Release: https://dotnet.microsoft.com/download/dotnet-core/3.1\n"
                    },
                    "shortDescription": {
                        "text": "Security Bypass in Microsoft.Owin@3.0.1",
                        "markdown": "Security Bypass in Microsoft.Owin@3.0.1"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.5",
                        "tags": ["security", "nuget", "CWE-358"]
                    }
                }, {
                    "id": "SNYK-DOTNET-MICROSOFTOWIN-3011423",
                    "name": "Microsoft.Owin@3.0.1",
                    "fullDescription": {
                        "text": "## Overview\n[Microsoft.Owin](https://www.nuget.org/packages/Microsoft.Owin/) is a Provides a set of helper types and abstractions for simplifying the creation of OWIN components.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a flaw in `.NET 6.0`, `.NET 5.0`, and .`NET core 3.1`, which makes it possible for an attacker to manipulate cookies and exploit this vulnerability.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `Microsoft.Owin` to version 4.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/220)\n- [GitHub Issue](https://github.com/dotnet/aspnetcore/issues/41608)\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117)\n",
                        "markdown": "## Overview\n[Microsoft.Owin](https://www.nuget.org/packages/Microsoft.Owin/) is a Provides a set of helper types and abstractions for simplifying the creation of OWIN components.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a flaw in `.NET 6.0`, `.NET 5.0`, and .`NET core 3.1`, which makes it possible for an attacker to manipulate cookies and exploit this vulnerability.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `Microsoft.Owin` to version 4.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/220)\n- [GitHub Issue](https://github.com/dotnet/aspnetcore/issues/41608)\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Issue: https://github.com/dotnet/announcements/issues/220\nGitHub Issue: https://github.com/dotnet/aspnetcore/issues/41608\nMicrosoft Security Advisory: https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117\n",
                        "markdown": "References:\nGitHub Issue: https://github.com/dotnet/announcements/issues/220\nGitHub Issue: https://github.com/dotnet/aspnetcore/issues/41608\nMicrosoft Security Advisory: https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117\n"
                    },
                    "shortDescription": {
                        "text": "Denial of Service (DoS) in Microsoft.Owin@3.0.1",
                        "markdown": "Denial of Service (DoS) in Microsoft.Owin@3.0.1"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.5",
                        "tags": ["security", "nuget", "CWE-400"]
                    }
                }, {
                    "id": "SNYK-DOTNET-MICROSOFTOWINSECURITYCOOKIES-3011424",
                    "name": "Microsoft.Owin.Security.Cookies@3.0.1",
                    "fullDescription": {
                        "text": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a flaw in `.NET 6.0`, `.NET 5.0`, and .`NET core 3.1`, which makes it possible for an attacker to manipulate cookies and exploit this vulnerability.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `Microsoft.Owin.Security.Cookies` to version 4.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/220)\n- [GitHub Issue](https://github.com/dotnet/aspnetcore/issues/41608)\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117)\n",
                        "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a flaw in `.NET 6.0`, `.NET 5.0`, and .`NET core 3.1`, which makes it possible for an attacker to manipulate cookies and exploit this vulnerability.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `Microsoft.Owin.Security.Cookies` to version 4.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/220)\n- [GitHub Issue](https://github.com/dotnet/aspnetcore/issues/41608)\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Issue: https://github.com/dotnet/announcements/issues/220\nGitHub Issue: https://github.com/dotnet/aspnetcore/issues/41608\nMicrosoft Security Advisory: https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117\n",
                        "markdown": "References:\nGitHub Issue: https://github.com/dotnet/announcements/issues/220\nGitHub Issue: https://github.com/dotnet/aspnetcore/issues/41608\nMicrosoft Security Advisory: https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2022-29117\n"
                    },
                    "shortDescription": {
                        "text": "Denial of Service (DoS) in Microsoft.Owin.Security.Cookies@3.0.1",
                        "markdown": "Denial of Service (DoS) in Microsoft.Owin.Security.Cookies@3.0.1"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.5",
                        "tags": ["security", "nuget", "CWE-400"]
                    }
                }, {
                    "id": "SNYK-DOTNET-BOOTSTRAP-450231",
                    "name": "bootstrap@4.0.0",
                    "fullDescription": {
                        "text": "## Overview\n\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia the `tooltip`, `collapse` and `scrollspy` plugins.\n\n## Details \nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\r\n\r\n\u05bfInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \r\n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `bootstrap` to version 4.1.2 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0)\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628)\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621)\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26625)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26627)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26628)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906)\n\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/26630)\n",
                        "markdown": "## Overview\n\n[bootstrap](https://www.nuget.org/packages/bootstrap/) is a most popular front-end framework for developing responsive, mobile first projects on the web.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia the `tooltip`, `collapse` and `scrollspy` plugins.\n\n## Details \nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser\u2019s Same Origin Policy.\r\n\r\n\u05bfInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they\u2019ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user\u2019s browser.| \r\n|**DOM-based**|Client|The attacker forces the user\u2019s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `bootstrap` to version 4.1.2 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0)\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628)\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621)\n\n- [GitHub Commit](https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26625)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26627)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/26628)\n\n- [GitHub Issue](https://github.com/twbs/bootstrap/issues/27915#issuecomment-452140906)\n\n- [GitHub PR](https://github.com/twbs/bootstrap/pull/26630)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Commit: https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26625\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26627\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26628\nGitHub Issue: https://github.com/twbs/bootstrap/issues/27915%23issuecomment-452140906\nGitHub PR: https://github.com/twbs/bootstrap/pull/26630\n",
                        "markdown": "References:\nGitHub Commit: https://github.com/twbs/bootstrap/commit/149096016f70fd815540d62c0989fd99cdc809e0\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/3229efc0811df29765c1d0a949c85362378b0628\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/3ba186313e9e651bbd52a6a3a0305891dee0a621\nGitHub Commit: https://github.com/twbs/bootstrap/pull/26630/commits/efca80bb5bb34546a2e7a9488b89f71457d2ad92\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26625\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26627\nGitHub Issue: https://github.com/twbs/bootstrap/issues/26628\nGitHub Issue: https://github.com/twbs/bootstrap/issues/27915%23issuecomment-452140906\nGitHub PR: https://github.com/twbs/bootstrap/pull/26630\n"
                    },
                    "shortDescription": {
                        "text": "Cross-site Scripting (XSS) in bootstrap@4.0.0",
                        "markdown": "Cross-site Scripting (XSS) in bootstrap@4.0.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "6.5",
                        "tags": ["security", "nuget", "CWE-79"]
                    }
                }, {
                    "id": "SNYK-JS-MINIMIST-2429795",
                    "name": "minimist@1.2.5",
                    "fullDescription": {
                        "text": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
                        "markdown": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n"
                    },
                    "help": {
                        "text": "References:\nFix Commit: https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d\nGitHub Issue: https://github.com/substack/minimist/issues/164\nVulnerable Code: https://github.com/substack/minimist/blob/master/index.js%23L69\n",
                        "markdown": "References:\nFix Commit: https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d\nGitHub Issue: https://github.com/substack/minimist/issues/164\nVulnerable Code: https://github.com/substack/minimist/blob/master/index.js%23L69\n"
                    },
                    "shortDescription": {
                        "text": "Prototype Pollution in minimist@1.2.5",
                        "markdown": "Prototype Pollution in minimist@1.2.5"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "3.7",
                        "tags": ["security", "npm", "CWE-1321"]
                    }
                }, {
                    "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
                    "name": "System.Net.Http@4.3.0",
                    "fullDescription": {
                        "text": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
                        "markdown": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n"
                    },
                    "help": {
                        "text": "References:\nDavid Fernandez Blog: https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS\nGitHub Issue: https://github.com/aspnet/Announcements/issues/239\nMicrosoft Security Advisory: https://technet.microsoft.com/en-us/library/security/4021279.aspx\nNVD: https://nvd.nist.gov/vuln/detail/2017-0247\n",
                        "markdown": "References:\nDavid Fernandez Blog: https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS\nGitHub Issue: https://github.com/aspnet/Announcements/issues/239\nMicrosoft Security Advisory: https://technet.microsoft.com/en-us/library/security/4021279.aspx\nNVD: https://nvd.nist.gov/vuln/detail/2017-0247\n"
                    },
                    "shortDescription": {
                        "text": "Denial of Service (DoS) in System.Net.Http@4.3.0",
                        "markdown": "Denial of Service (DoS) in System.Net.Http@4.3.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.5",
                        "tags": ["security", "nuget", "CWE-254"]
                    }
                }, {
                    "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
                    "name": "System.Net.Http@4.3.0",
                    "fullDescription": {
                        "text": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
                        "markdown": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Issue: https://github.com/aspnet/Announcements/issues/239\nMicrosoft Security Advisory: https://technet.microsoft.com/en-us/library/security/4021279.aspx\nNVD: https://nvd.nist.gov/vuln/detail/2017-0248\n",
                        "markdown": "References:\nGitHub Issue: https://github.com/aspnet/Announcements/issues/239\nMicrosoft Security Advisory: https://technet.microsoft.com/en-us/library/security/4021279.aspx\nNVD: https://nvd.nist.gov/vuln/detail/2017-0248\n"
                    },
                    "shortDescription": {
                        "text": "Improper Certificate Validation in System.Net.Http@4.3.0",
                        "markdown": "Improper Certificate Validation in System.Net.Http@4.3.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.5",
                        "tags": ["security", "nuget", "CWE-287"]
                    }
                }, {
                    "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
                    "name": "System.Net.Http@4.3.0",
                    "fullDescription": {
                        "text": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
                        "markdown": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Issue: https://github.com/aspnet/Announcements/issues/239\n",
                        "markdown": "References:\nGitHub Issue: https://github.com/aspnet/Announcements/issues/239\n"
                    },
                    "shortDescription": {
                        "text": "Privilege Escalation in System.Net.Http@4.3.0",
                        "markdown": "Privilege Escalation in System.Net.Http@4.3.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.3",
                        "tags": ["security", "nuget", "CWE-269"]
                    }
                }, {
                    "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
                    "name": "System.Net.Http@4.3.0",
                    "fullDescription": {
                        "text": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
                        "markdown": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Issue: https://github.com/aspnet/Announcements/issues/239\nMicrosoft Security Advisory: https://technet.microsoft.com/en-us/library/security/4021279.aspx\nNVD: https://nvd.nist.gov/vuln/detail/2017-0256\n",
                        "markdown": "References:\nGitHub Issue: https://github.com/aspnet/Announcements/issues/239\nMicrosoft Security Advisory: https://technet.microsoft.com/en-us/library/security/4021279.aspx\nNVD: https://nvd.nist.gov/vuln/detail/2017-0256\n"
                    },
                    "shortDescription": {
                        "text": "Authentication Bypass in System.Net.Http@4.3.0",
                        "markdown": "Authentication Bypass in System.Net.Http@4.3.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "5.3",
                        "tags": ["security", "nuget", "CWE-20"]
                    }
                }, {
                    "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
                    "name": "System.Net.Http@4.3.0",
                    "fullDescription": {
                        "text": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
                        "markdown": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Issue: https://github.com/dotnet/announcements/issues/88\n",
                        "markdown": "References:\nGitHub Issue: https://github.com/dotnet/announcements/issues/88\n"
                    },
                    "shortDescription": {
                        "text": "Information Exposure in System.Net.Http@4.3.0",
                        "markdown": "Information Exposure in System.Net.Http@4.3.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.5",
                        "tags": ["security", "nuget", "CWE-200"]
                    }
                }, {
                    "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
                    "name": "System.Text.RegularExpressions@4.3.0",
                    "fullDescription": {
                        "text": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet\u2019s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
                        "markdown": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet\u2019s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n"
                    },
                    "help": {
                        "text": "References:\nGitHub Issue: https://github.com/dotnet/announcements/issues/111\nMicrosoft Security Advisory: https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820\n",
                        "markdown": "References:\nGitHub Issue: https://github.com/dotnet/announcements/issues/111\nMicrosoft Security Advisory: https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820\n"
                    },
                    "shortDescription": {
                        "text": "Regular Expression Denial of Service (ReDoS) in System.Text.RegularExpressions@4.3.0",
                        "markdown": "Regular Expression Denial of Service (ReDoS) in System.Text.RegularExpressions@4.3.0"
                    },
                    "properties": {
                        "type": "vulnerability",
                        "security-severity": "7.5",
                        "tags": ["security", "nuget", "CWE-400"]
                    }
                }]
            }
        },
        "results": [{
            "ruleId": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
            "ruleIndex": 0,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Newtonsoft.Json package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Common/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "3c786855-9b89-4094-9cd0-4e40c6d346a8",
            "correlationGuid": "3c786855-9b89-4094-9cd0-4e40c6d346a8",
            "fingerprints": {
                "0": "5159c77798702b76a3298bb89325f876afa9776ec89ba94a1345c9edf96d3a49"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.430Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Newtonsoft.Json",
                "packageVersion": "10.0.3",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
                "vulnPublicationDate": "2022-04-24T10:58:25Z",
                "semanticVersion": ["[,13.0.1)"],
                "patchedVersion": ["13.0.1"],
                "cve": [],
                "cwe": ["CWE-755"],
                "xref": ["GHSA-5crp-9r3c-p9vr"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450216",
            "ruleIndex": 1,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "4369f6b0-6231-4a97-a0b9-4590156c14e4",
            "correlationGuid": "4369f6b0-6231-4a97-a0b9-4590156c14e4",
            "fingerprints": {
                "0": "021f95ca8b4831b8a179d996f6b072415c97a6f9782538b93bd5dfbff6b25eca"
            },
            "suppressions": [{
                "kind": "external",
                "status": "accepted",
                "justification": "False positive",
                "properties": {
                    "alias": "eric.mead",
                    "timeUtc": "2023-01-27T18:44:08.6461618Z"
                }
            }],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.503Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "3.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2019-02-15T19:32:59Z",
                "semanticVersion": ["[,3.4.1)", "[4.0.0, 4.3.1)"],
                "patchedVersion": ["3.4.1", "4.3.1"],
                "cve": ["CVE-2019-8331"],
                "cwe": ["CWE-79"],
                "xref": ["891", "GHSA-9v3m-8fp8-mj99"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450234",
            "ruleIndex": 2,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "dd8fc64d-3f8c-4584-b359-beb563ac50f5",
            "correlationGuid": "dd8fc64d-3f8c-4584-b359-beb563ac50f5",
            "fingerprints": {
                "0": "af38806f4cdce13f7c1f5aa96329f68ce523f5d6537c7da25a4d6a99a0e1593b"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.505Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "3.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2018-06-12T08:15:05Z",
                "semanticVersion": ["[4.0.0 ,4.1.2)", "[,3.4.0)"],
                "patchedVersion": ["4.1.2", "3.4.0"],
                "cve": ["CVE-2018-14040", "CVE-2018-14042"],
                "cwe": ["CWE-79"],
                "xref": ["GHSA-7mvr-5x2g-wfc8"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450235",
            "ruleIndex": 3,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "c746204a-274a-46dc-9acf-1b177d849409",
            "correlationGuid": "c746204a-274a-46dc-9acf-1b177d849409",
            "fingerprints": {
                "0": "6e5d41af61712865286208c07252ab18965c7a8aa7b1fadf0132cbcc1766826a"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.505Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "3.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
                "vulnPublicationDate": "2019-01-10T09:27:20Z",
                "semanticVersion": ["[,3.4.0)"],
                "patchedVersion": ["3.4.0"],
                "cve": ["CVE-2018-20677"],
                "cwe": ["CWE-79"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450236",
            "ruleIndex": 4,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "12e6779d-fae4-4710-a7d0-18bc09363216",
            "correlationGuid": "12e6779d-fae4-4710-a7d0-18bc09363216",
            "fingerprints": {
                "0": "b19136825648bc22c3304451fd9bb39265a5ac55395cb8fc9ce90f70a83ecbe9"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.505Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "3.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2019-01-10T09:27:20Z",
                "semanticVersion": ["[,3.4.0)"],
                "patchedVersion": ["3.4.0"],
                "cve": ["CVE-2018-20676"],
                "cwe": ["CWE-79"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-450226",
            "ruleIndex": 5,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "81ae99b4-f63f-44af-9c13-da1a9476a89e",
            "correlationGuid": "81ae99b4-f63f-44af-9c13-da1a9476a89e",
            "fingerprints": {
                "0": "a115db0c7ed74c18e986aca888f95417f23d6057528c4394ca6ecd87f8a17615"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 5.6,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.505Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "1.10.2",
                "cvss3BaseScore": "5.6",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
                "vulnPublicationDate": "2019-03-27T08:40:08Z",
                "semanticVersion": ["[,3.4.0)"],
                "patchedVersion": ["3.4.0"],
                "cve": ["CVE-2019-5428", "CVE-2019-11358"],
                "cwe": ["CWE-1321"],
                "xref": ["796", "GHSA-wv67-q8rr-grjp"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-450227",
            "ruleIndex": 6,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "db2642ec-7973-47c9-a1fe-0852c7e3eef9",
            "correlationGuid": "db2642ec-7973-47c9-a1fe-0852c7e3eef9",
            "fingerprints": {
                "0": "32d6ea5db33d59b76cc8f3f9f8bd4a5e372e8a7928633fd93b8c8de7093059ec"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 5.4,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "1.10.2",
                "cvss3BaseScore": "5.4",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
                "vulnPublicationDate": "2016-11-27T00:00:00Z",
                "semanticVersion": ["[,1.12.2)", "[1.12.3 ,3.0.0)"],
                "patchedVersion": ["1.12.2", "3.0.0"],
                "cve": ["CVE-2015-9251", "CVE-2017-16012"],
                "cwe": ["CWE-79"],
                "xref": ["328", "GHSA-rmxg-73gg-4p98"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-565440",
            "ruleIndex": 7,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "74342053-cb3a-4868-9e36-65a83bf2eecf",
            "correlationGuid": "74342053-cb3a-4868-9e36-65a83bf2eecf",
            "fingerprints": {
                "0": "b48c7bbda0a54569ce13b9e33f5af45925ad397d458b1bd7c646153a4ff2cefd"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.3,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "1.10.2",
                "cvss3BaseScore": "6.3",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:F/RL:O/RC:C",
                "vulnPublicationDate": "2020-04-13T15:33:49Z",
                "semanticVersion": ["[1.0.3 ,3.5.0)"],
                "patchedVersion": ["3.5.0"],
                "cve": ["CVE-2020-11023"],
                "cwe": ["CWE-79"],
                "xref": ["GHSA-jpcq-cgw6-v4j6"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-60118",
            "ruleIndex": 8,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "d04285c6-650f-456e-866d-5181958a5bd3",
            "correlationGuid": "d04285c6-650f-456e-866d-5181958a5bd3",
            "fingerprints": {
                "0": "5707d65f9c81721879749eb808df418da3db82676eba90fdd2f2ab76f1248aed"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 5.4,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "1.10.2",
                "cvss3BaseScore": "5.4",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
                "vulnPublicationDate": "2016-11-27T00:00:00Z",
                "semanticVersion": ["[1.4.0, 1.12.0)", "(1.12.3, 3.0.0-beta1)"],
                "patchedVersion": ["1.12.0", "3.0.0-beta1"],
                "cve": [],
                "cwe": ["CWE-79"],
                "xref": ["328"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERYVALIDATION-1056869",
            "ruleIndex": 9,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable jQuery.Validation package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "f3b28943-8a82-4883-b97e-2b1cd8317368",
            "correlationGuid": "f3b28943-8a82-4883-b97e-2b1cd8317368",
            "fingerprints": {
                "0": "5689a03250ddda401de36dff9d401936a2f3a15706d0401e3affbd90b7ce498e"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery.Validation",
                "packageVersion": "1.11.1",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "vulnPublicationDate": "2021-01-14T17:44:14Z",
                "semanticVersion": ["[,1.19.3)"],
                "patchedVersion": ["1.19.3"],
                "cve": ["CVE-2021-21252"],
                "cwe": ["CWE-400"],
                "xref": ["GHSL-2020-294", "GHSA-jxwx-85vp-gvwm"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-MICROSOFTOWIN-1019387",
            "ruleIndex": 10,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Microsoft.Owin package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "2d8d7aaf-b149-4cba-91a9-64d7a60c3590",
            "correlationGuid": "2d8d7aaf-b149-4cba-91a9-64d7a60c3590",
            "fingerprints": {
                "0": "42398a3a87554af27500e311781c08aabc763e663b0c1f3a70f49acdaa74195c"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Microsoft.Owin",
                "packageVersion": "3.0.1",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P/RL:O/RC:C",
                "vulnPublicationDate": "2020-09-09T15:00:21Z",
                "semanticVersion": ["[,4.1.1)"],
                "patchedVersion": ["4.1.1"],
                "cve": ["CVE-2020-1045"],
                "cwe": ["CWE-358"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-MICROSOFTOWIN-3011423",
            "ruleIndex": 11,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Microsoft.Owin package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "4c73c16f-8eb2-419f-9bb8-2890bdc604a3",
            "correlationGuid": "4c73c16f-8eb2-419f-9bb8-2890bdc604a3",
            "fingerprints": {
                "0": "af6246a880a12f56eceb1907456a0e9160cb3e79a8f0788442ab95a4d4dd48ad"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Microsoft.Owin",
                "packageVersion": "3.0.1",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "vulnPublicationDate": "2022-08-31T11:50:47.954649Z",
                "semanticVersion": ["[,4.2.2)"],
                "patchedVersion": ["4.2.2"],
                "cve": ["CVE-2022-29117"],
                "cwe": ["CWE-400"],
                "xref": ["GHSA-3rq8-h3gj-r5c6"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-MICROSOFTOWINSECURITYCOOKIES-3011424",
            "ruleIndex": 12,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Microsoft.Owin.Security.Cookies package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "323495ee-408e-4945-9f97-82b471c8ea26",
            "correlationGuid": "323495ee-408e-4945-9f97-82b471c8ea26",
            "fingerprints": {
                "0": "fc199b903e4969241586e9e39f933ed1153e151e07103d4cdbbee18aedc7fe0f"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Microsoft.Owin.Security.Cookies",
                "packageVersion": "3.0.1",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "vulnPublicationDate": "2022-08-31T11:50:47.954649Z",
                "semanticVersion": ["[,4.2.2)"],
                "patchedVersion": ["4.2.2"],
                "cve": ["CVE-2022-29117"],
                "cwe": ["CWE-400"],
                "xref": ["GHSA-3rq8-h3gj-r5c6"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
            "ruleIndex": 0,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Newtonsoft.Json package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Fox/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "51123d39-ebf2-4418-9918-180e8ad4e00f",
            "correlationGuid": "51123d39-ebf2-4418-9918-180e8ad4e00f",
            "fingerprints": {
                "0": "6dd945049dd4479c8024dd1c2580f604203c766bb3669e82f6512eea4fe62558"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Newtonsoft.Json",
                "packageVersion": "6.0.4",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
                "vulnPublicationDate": "2022-04-24T10:58:25Z",
                "semanticVersion": ["[,13.0.1)"],
                "patchedVersion": ["13.0.1"],
                "cve": [],
                "cwe": ["CWE-755"],
                "xref": ["GHSA-5crp-9r3c-p9vr"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450216",
            "ruleIndex": 1,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "e682da7c-9f54-4cea-8457-348b2ec74b09",
            "correlationGuid": "e682da7c-9f54-4cea-8457-348b2ec74b09",
            "fingerprints": {
                "0": "82a6f536ba1fb66433846611b0024a7eb7717bcf38fa7c9715b2289693f8a40e"
            },
            "suppressions": [{
                "kind": "external",
                "status": "accepted",
                "justification": "False positive",
                "properties": {
                    "alias": "eric.mead",
                    "timeUtc": "2023-01-27T18:44:08.6461618Z"
                }
            }],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "4.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2019-02-15T19:32:59Z",
                "semanticVersion": ["[,3.4.1)", "[4.0.0, 4.3.1)"],
                "patchedVersion": ["3.4.1", "4.3.1"],
                "cve": ["CVE-2019-8331"],
                "cwe": ["CWE-79"],
                "xref": ["891", "GHSA-9v3m-8fp8-mj99"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450231",
            "ruleIndex": 13,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "d209e646-1405-4e56-b394-59e0a888df30",
            "correlationGuid": "d209e646-1405-4e56-b394-59e0a888df30",
            "fingerprints": {
                "0": "512389da1ef917a78d29c4f6460f2dbcb8410cfc677f29bd8e41e33fb311ce98"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "4.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2018-06-12T08:15:05Z",
                "semanticVersion": ["[4.0.0 ,4.1.2)"],
                "patchedVersion": ["4.1.2"],
                "cve": ["CVE-2018-14041"],
                "cwe": ["CWE-79"],
                "xref": ["GHSA-pj7m-g53m-7638"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450234",
            "ruleIndex": 2,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "21e0412c-0bee-43eb-9952-b1b2553d4076",
            "correlationGuid": "21e0412c-0bee-43eb-9952-b1b2553d4076",
            "fingerprints": {
                "0": "acbf80ec789f475d674065189124716cc04735c86a02e080ed947bf8dc9ec633"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "4.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2018-06-12T08:15:05Z",
                "semanticVersion": ["[4.0.0 ,4.1.2)", "[,3.4.0)"],
                "patchedVersion": ["4.1.2", "3.4.0"],
                "cve": ["CVE-2018-14040", "CVE-2018-14042"],
                "cwe": ["CWE-79"],
                "xref": ["GHSA-7mvr-5x2g-wfc8"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-450226",
            "ruleIndex": 5,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "e646e418-af41-40a7-b71e-ff6a553a6788",
            "correlationGuid": "e646e418-af41-40a7-b71e-ff6a553a6788",
            "fingerprints": {
                "0": "25316a208ef3b8ee8a213f8fd41e8e65de27fece17fffe581c4afca87b09c25e"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 5.6,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.506Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "3.3.1",
                "cvss3BaseScore": "5.6",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
                "vulnPublicationDate": "2019-03-27T08:40:08Z",
                "semanticVersion": ["[,3.4.0)"],
                "patchedVersion": ["3.4.0"],
                "cve": ["CVE-2019-5428", "CVE-2019-11358"],
                "cwe": ["CWE-1321"],
                "xref": ["796", "GHSA-wv67-q8rr-grjp"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-565440",
            "ruleIndex": 7,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "eb76a6c6-6e01-4dea-b9c3-b7fe42bdeaae",
            "correlationGuid": "eb76a6c6-6e01-4dea-b9c3-b7fe42bdeaae",
            "fingerprints": {
                "0": "ad39eeb316d9a35c6eba597d3876b8d18372e7ca16ce0aa66758880fbcb113a3"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.3,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "3.3.1",
                "cvss3BaseScore": "6.3",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:F/RL:O/RC:C",
                "vulnPublicationDate": "2020-04-13T15:33:49Z",
                "semanticVersion": ["[1.0.3 ,3.5.0)"],
                "patchedVersion": ["3.5.0"],
                "cve": ["CVE-2020-11023"],
                "cwe": ["CWE-79"],
                "xref": ["GHSA-jpcq-cgw6-v4j6"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERYVALIDATION-1056869",
            "ruleIndex": 9,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable jQuery.Validation package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "bc82cc5a-5d64-488c-b8e7-eab765e88e92",
            "correlationGuid": "bc82cc5a-5d64-488c-b8e7-eab765e88e92",
            "fingerprints": {
                "0": "0150d7eb090f637fcbb3c128c203d064f04d0b1dc7b76b23afdd08c1fbbc1e1a"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery.Validation",
                "packageVersion": "1.16.0",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "vulnPublicationDate": "2021-01-14T17:44:14Z",
                "semanticVersion": ["[,1.19.3)"],
                "patchedVersion": ["1.19.3"],
                "cve": ["CVE-2021-21252"],
                "cwe": ["CWE-400"],
                "xref": ["GHSL-2020-294", "GHSA-jxwx-85vp-gvwm"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-MICROSOFTOWIN-1019387",
            "ruleIndex": 10,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Microsoft.Owin package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "287cc168-7a3a-4459-8a68-c21b33b73d34",
            "correlationGuid": "287cc168-7a3a-4459-8a68-c21b33b73d34",
            "fingerprints": {
                "0": "328f96e1e107f666d29ac67e0d0b937e6c2e6cf7839773c859e826d100d807da"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Microsoft.Owin",
                "packageVersion": "4.0.0-preview1",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P/RL:O/RC:C",
                "vulnPublicationDate": "2020-09-09T15:00:21Z",
                "semanticVersion": ["[,4.1.1)"],
                "patchedVersion": ["4.1.1"],
                "cve": ["CVE-2020-1045"],
                "cwe": ["CWE-358"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-MICROSOFTOWIN-3011423",
            "ruleIndex": 11,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Microsoft.Owin package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "2bff1135-24ba-43fa-bc35-f54e175aeeef",
            "correlationGuid": "2bff1135-24ba-43fa-bc35-f54e175aeeef",
            "fingerprints": {
                "0": "215ec52353919a19846962c0ebbd6cd8c7668fe7f1a0029a462c988b770fd26d"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Microsoft.Owin",
                "packageVersion": "4.0.0-preview1",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "vulnPublicationDate": "2022-08-31T11:50:47.954649Z",
                "semanticVersion": ["[,4.2.2)"],
                "patchedVersion": ["4.2.2"],
                "cve": ["CVE-2022-29117"],
                "cwe": ["CWE-400"],
                "xref": ["GHSA-3rq8-h3gj-r5c6"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-MICROSOFTOWINSECURITYCOOKIES-3011424",
            "ruleIndex": 12,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Microsoft.Owin.Security.Cookies package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "66a4a458-cdc0-43e4-a1c8-1b514a3740b6",
            "correlationGuid": "66a4a458-cdc0-43e4-a1c8-1b514a3740b6",
            "fingerprints": {
                "0": "a3abd2773d1f8679a353f8061620d408228882ca6faec8a1be9834bf720d5867"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Microsoft.Owin.Security.Cookies",
                "packageVersion": "4.0.0-preview1",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "vulnPublicationDate": "2022-08-31T11:50:47.954649Z",
                "semanticVersion": ["[,4.2.2)"],
                "patchedVersion": ["4.2.2"],
                "cve": ["CVE-2022-29117"],
                "cwe": ["CWE-400"],
                "xref": ["GHSA-3rq8-h3gj-r5c6"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
            "ruleIndex": 0,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Newtonsoft.Json package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Raccoon/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "a7be997d-02de-4a72-8e3e-4bc948e69c8f",
            "correlationGuid": "a7be997d-02de-4a72-8e3e-4bc948e69c8f",
            "fingerprints": {
                "0": "7bb5014b4fdedfafe04ec907904b6f37aa2c3a3273d8658b0dff854dc12b373f"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Newtonsoft.Json",
                "packageVersion": "11.0.1-beta3",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
                "vulnPublicationDate": "2022-04-24T10:58:25Z",
                "semanticVersion": ["[,13.0.1)"],
                "patchedVersion": ["13.0.1"],
                "cve": [],
                "cwe": ["CWE-755"],
                "xref": ["GHSA-5crp-9r3c-p9vr"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450216",
            "ruleIndex": 1,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Skunk/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "b991c831-bc90-4a13-8948-bb99912e3100",
            "correlationGuid": "b991c831-bc90-4a13-8948-bb99912e3100",
            "fingerprints": {
                "0": "56eea99b834266e66ce3a51847f760ea049e5e11e06e57c812477acd20154636"
            },
            "suppressions": [{
                "kind": "external",
                "status": "accepted",
                "justification": "False positive",
                "properties": {
                    "alias": "eric.mead",
                    "timeUtc": "2023-01-27T18:44:08.6461618Z"
                }
            }],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "3.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2019-02-15T19:32:59Z",
                "semanticVersion": ["[,3.4.1)", "[4.0.0, 4.3.1)"],
                "patchedVersion": ["3.4.1", "4.3.1"],
                "cve": ["CVE-2019-8331"],
                "cwe": ["CWE-79"],
                "xref": ["891", "GHSA-9v3m-8fp8-mj99"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450234",
            "ruleIndex": 2,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Skunk/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "0d6cbf90-1f36-4ff2-ba71-3ade92646d83",
            "correlationGuid": "0d6cbf90-1f36-4ff2-ba71-3ade92646d83",
            "fingerprints": {
                "0": "8899e208a8a8772b4a08c3cc3cf535367137518068dff440e8621223feaa5651"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "3.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2018-06-12T08:15:05Z",
                "semanticVersion": ["[4.0.0 ,4.1.2)", "[,3.4.0)"],
                "patchedVersion": ["4.1.2", "3.4.0"],
                "cve": ["CVE-2018-14040", "CVE-2018-14042"],
                "cwe": ["CWE-79"],
                "xref": ["GHSA-7mvr-5x2g-wfc8"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450235",
            "ruleIndex": 3,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Skunk/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "bf4781e6-9629-4bd5-b38c-f8f0e572010c",
            "correlationGuid": "bf4781e6-9629-4bd5-b38c-f8f0e572010c",
            "fingerprints": {
                "0": "72e0b9fa9a69097825ce0ee71c597a0bb0e5090d29dde13fce20fcda2feea5c3"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "3.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
                "vulnPublicationDate": "2019-01-10T09:27:20Z",
                "semanticVersion": ["[,3.4.0)"],
                "patchedVersion": ["3.4.0"],
                "cve": ["CVE-2018-20677"],
                "cwe": ["CWE-79"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-BOOTSTRAP-450236",
            "ruleIndex": 4,
            "message": {
                "text": "This file introduces a vulnerable bootstrap package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Skunk/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "aac5a91c-f8b5-4bc2-ae56-5dae5c81637e",
            "correlationGuid": "aac5a91c-f8b5-4bc2-ae56-5dae5c81637e",
            "fingerprints": {
                "0": "3f5430363c6cd4fc234680675d535bd207890a639803cb0df3594c6eea9feebd"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "bootstrap",
                "packageVersion": "3.0.0",
                "cvss3BaseScore": "6.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2019-01-10T09:27:20Z",
                "semanticVersion": ["[,3.4.0)"],
                "patchedVersion": ["3.4.0"],
                "cve": ["CVE-2018-20676"],
                "cwe": ["CWE-79"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-450226",
            "ruleIndex": 5,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Skunk/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "a45c2464-c200-4333-88f6-6c592693acf6",
            "correlationGuid": "a45c2464-c200-4333-88f6-6c592693acf6",
            "fingerprints": {
                "0": "b135f561261537ebaed00df198c29d5ce2bcc346f7e2cdf8ddbafca08d39e2b2"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 5.6,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "1.10.2",
                "cvss3BaseScore": "5.6",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
                "vulnPublicationDate": "2019-03-27T08:40:08Z",
                "semanticVersion": ["[,3.4.0)"],
                "patchedVersion": ["3.4.0"],
                "cve": ["CVE-2019-5428", "CVE-2019-11358"],
                "cwe": ["CWE-1321"],
                "xref": ["796", "GHSA-wv67-q8rr-grjp"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-450227",
            "ruleIndex": 6,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Skunk/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "b16d0146-7a60-4458-a3bd-35fabdcb0e7a",
            "correlationGuid": "b16d0146-7a60-4458-a3bd-35fabdcb0e7a",
            "fingerprints": {
                "0": "f0c0cd39b519373204686bfd7dbea0f0fb93594f8d4c1891d356aa528f168b71"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 5.4,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "1.10.2",
                "cvss3BaseScore": "5.4",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
                "vulnPublicationDate": "2016-11-27T00:00:00Z",
                "semanticVersion": ["[,1.12.2)", "[1.12.3 ,3.0.0)"],
                "patchedVersion": ["1.12.2", "3.0.0"],
                "cve": ["CVE-2015-9251", "CVE-2017-16012"],
                "cwe": ["CWE-79"],
                "xref": ["328", "GHSA-rmxg-73gg-4p98"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-565440",
            "ruleIndex": 7,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Skunk/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "d4ada101-18ad-448d-967e-42bf46606aed",
            "correlationGuid": "d4ada101-18ad-448d-967e-42bf46606aed",
            "fingerprints": {
                "0": "a30c99973b95b4f905553f1ca32c1bf696a4616657f9c5116521d4d24d983be4"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 6.3,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "1.10.2",
                "cvss3BaseScore": "6.3",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:F/RL:O/RC:C",
                "vulnPublicationDate": "2020-04-13T15:33:49Z",
                "semanticVersion": ["[1.0.3 ,3.5.0)"],
                "patchedVersion": ["3.5.0"],
                "cve": ["CVE-2020-11023"],
                "cwe": ["CWE-79"],
                "xref": ["GHSA-jpcq-cgw6-v4j6"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-JQUERY-60118",
            "ruleIndex": 8,
            "message": {
                "text": "This file introduces a vulnerable jQuery package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Skunk/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "ab77d754-ed8d-4d2b-8c4b-0195159b4571",
            "correlationGuid": "ab77d754-ed8d-4d2b-8c4b-0195159b4571",
            "fingerprints": {
                "0": "a8a6d80aa842403b822454dca6919ee9dab1af667a5a1a1bf0171a83d492ad53"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 5.4,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.507Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "jQuery",
                "packageVersion": "1.10.2",
                "cvss3BaseScore": "5.4",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
                "vulnPublicationDate": "2016-11-27T00:00:00Z",
                "semanticVersion": ["[1.4.0, 1.12.0)", "(1.12.3, 3.0.0-beta1)"],
                "patchedVersion": ["1.12.0", "3.0.0-beta1"],
                "cve": [],
                "cwe": ["CWE-79"],
                "xref": ["328"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
            "ruleIndex": 0,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Newtonsoft.Json package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Skunk/packages.config",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "30eb0986-348a-4ded-81c3-4ff08f8ce766",
            "correlationGuid": "30eb0986-348a-4ded-81c3-4ff08f8ce766",
            "fingerprints": {
                "0": "a856413798fd531bbe495f1ee222c94ce70d44ab710c6311d4ec6b1d1d669e2d"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.508Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Newtonsoft.Json",
                "packageVersion": "6.0.4",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
                "vulnPublicationDate": "2022-04-24T10:58:25Z",
                "semanticVersion": ["[,13.0.1)"],
                "patchedVersion": ["13.0.1"],
                "cve": [],
                "cwe": ["CWE-755"],
                "xref": ["GHSA-5crp-9r3c-p9vr"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-JS-MINIMIST-2429795",
            "ruleIndex": 14,
            "level": "note",
            "message": {
                "text": "This file introduces a vulnerable minimist package with a low severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "src/Squirrel/package-lock.json",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "17b6984e-4ecf-4c5d-9c66-cf8fe4c87dd0",
            "correlationGuid": "17b6984e-4ecf-4c5d-9c66-cf8fe4c87dd0",
            "fingerprints": {
                "0": "2dcc0cc6acf67e5d451a29ea7025022eafb252cfbac6fa649d4c5050153085a1"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 3.7,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.508Z"
            },
            "properties": {
                "packageManager": "npm",
                "packageName": "minimist",
                "packageVersion": "1.2.5",
                "cvss3BaseScore": "3.7",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
                "vulnPublicationDate": "2022-03-21T12:09:35Z",
                "semanticVersion": ["<1.2.6"],
                "patchedVersion": ["1.2.6"],
                "cve": ["CVE-2021-44906"],
                "cwe": ["CWE-1321"],
                "xref": ["SNYK-JS-MINIMIST-559764"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-NEWTONSOFTJSON-2774678",
            "ruleIndex": 0,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable Newtonsoft.Json package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "test/Coyote.Tests/obj/project.assets.json",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "d3c18a56-83d8-4e21-908a-136141d655ea",
            "correlationGuid": "d3c18a56-83d8-4e21-908a-136141d655ea",
            "fingerprints": {
                "0": "4bfb24cedc68c5208a26b0b2acefc579ea35f55ab26a7f0f22076e8b1a37633e"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.508Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "Newtonsoft.Json",
                "packageVersion": "9.0.1",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
                "vulnPublicationDate": "2022-04-24T10:58:25Z",
                "semanticVersion": ["[,13.0.1)"],
                "patchedVersion": ["13.0.1"],
                "cve": [],
                "cwe": ["CWE-755"],
                "xref": ["GHSA-5crp-9r3c-p9vr"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
            "ruleIndex": 15,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable System.Net.Http package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "test/Coyote.Tests/obj/project.assets.json",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "4aeda4bc-dafb-4020-b14e-15e1cb77d997",
            "correlationGuid": "4aeda4bc-dafb-4020-b14e-15e1cb77d997",
            "fingerprints": {
                "0": "fce9c3ea954ac6ee94efa3497d38d7d0b2623017d5f32684473c01702639f59d"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.508Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "System.Net.Http",
                "packageVersion": "4.3.0",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
                "vulnPublicationDate": "2017-05-09T00:00:00Z",
                "semanticVersion": ["[,4.1.2)", "[4.3.0,4.3.2)"],
                "patchedVersion": ["4.1.2", "4.3.2"],
                "cve": ["CVE-2017-0247"],
                "cwe": ["CWE-254"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
            "ruleIndex": 16,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable System.Net.Http package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "test/Coyote.Tests/obj/project.assets.json",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "bcd04e26-69c8-42b9-af21-9f9efe35cce5",
            "correlationGuid": "bcd04e26-69c8-42b9-af21-9f9efe35cce5",
            "fingerprints": {
                "0": "83d100895843e21f3e5b8bff6367e50911f14a580135ba3b346f99b5cc3170f6"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.508Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "System.Net.Http",
                "packageVersion": "4.3.0",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
                "vulnPublicationDate": "2017-05-12T00:00:00Z",
                "semanticVersion": ["[,4.1.2)", "[4.3,4.3.2)"],
                "patchedVersion": ["4.1.2", "4.3.2"],
                "cve": ["CVE-2017-0248"],
                "cwe": ["CWE-287"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
            "ruleIndex": 17,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable System.Net.Http package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "test/Coyote.Tests/obj/project.assets.json",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "03b7995a-99fd-4a76-9844-93108985c5de",
            "correlationGuid": "03b7995a-99fd-4a76-9844-93108985c5de",
            "fingerprints": {
                "0": "1af9dd2b4f85cdb6799aa5ef38811f87ba1598e07f87cf59a36022bdafb04b72"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.3,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.508Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "System.Net.Http",
                "packageVersion": "4.3.0",
                "cvss3BaseScore": "7.3",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
                "vulnPublicationDate": "2017-05-12T00:00:00Z",
                "semanticVersion": ["[,4.1.2)", "[4.3,4.3.2)"],
                "patchedVersion": ["4.1.2", "4.3.2"],
                "cve": ["CVE-2017-0249"],
                "cwe": ["CWE-269"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
            "ruleIndex": 18,
            "message": {
                "text": "This file introduces a vulnerable System.Net.Http package with a medium severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "test/Coyote.Tests/obj/project.assets.json",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "a00f8c9b-f8ba-441d-91b0-5bc20d7781fa",
            "correlationGuid": "a00f8c9b-f8ba-441d-91b0-5bc20d7781fa",
            "fingerprints": {
                "0": "f30908ffef7458cfed2a29d3ac15274479989e9e622bd85f9a749547dec2b1ba"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 5.3,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.508Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "System.Net.Http",
                "packageVersion": "4.3.0",
                "cvss3BaseScore": "5.3",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
                "vulnPublicationDate": "2017-05-12T00:00:00Z",
                "semanticVersion": ["[,4.1.2)", "[4.3,4.3.2)"],
                "patchedVersion": ["4.1.2", "4.3.2"],
                "cve": ["CVE-2017-0256"],
                "cwe": ["CWE-20"],
                "xref": [],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
            "ruleIndex": 19,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable System.Net.Http package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "test/Coyote.Tests/obj/project.assets.json",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "51c4c153-f45b-4430-8af6-2104b0e12e8e",
            "correlationGuid": "51c4c153-f45b-4430-8af6-2104b0e12e8e",
            "fingerprints": {
                "0": "4e6c8c18673851877af77ff333a10636b0b8efb192cb9a90a82b32c45cad34e3"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.508Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "System.Net.Http",
                "packageVersion": "4.3.0",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
                "vulnPublicationDate": "2018-10-10T15:24:52Z",
                "semanticVersion": ["[2.0.20126.16343, 2.0.20710)", "[4.0.0,4.0.1-beta-23225)", "[4.1.0,4.1.4)", "[4.3.0,4.3.4)"],
                "patchedVersion": ["2.0.20710", "4.0.1-beta-23225", "4.1.4", "4.3.4"],
                "cve": ["CVE-2018-8292"],
                "cwe": ["CWE-200"],
                "xref": ["GHSA-7jgj-8wvc-jh57"],
                "ResultMatching": {}
            }
        }, {
            "ruleId": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
            "ruleIndex": 20,
            "level": "error",
            "message": {
                "text": "This file introduces a vulnerable System.Text.RegularExpressions package with a high severity vulnerability."
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": "test/Coyote.Tests/obj/project.assets.json",
                        "uriBaseId": "%SRCROOT%"
                    },
                    "region": {
                        "startLine": 1
                    }
                }
            }],
            "guid": "af67f6fd-c8fb-4855-bea9-2744abde8a3b",
            "correlationGuid": "af67f6fd-c8fb-4855-bea9-2744abde8a3b",
            "fingerprints": {
                "0": "a84cb8a5f672bb84d64614ae75d026d7e1aad946215877ae7abc51e780ddd753"
            },
            "suppressions": [],
            "baselineState": "new",
            "rank": 7.5,
            "provenance": {
                "firstDetectionTimeUtc": "2023-01-27T18:43:58.508Z"
            },
            "properties": {
                "packageManager": "nuget",
                "packageName": "System.Text.RegularExpressions",
                "packageVersion": "4.3.0",
                "cvss3BaseScore": "7.5",
                "cvss3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "vulnPublicationDate": "2019-05-16T15:55:53Z",
                "semanticVersion": ["[4.3.0, 4.3.1)"],
                "patchedVersion": ["4.3.1"],
                "cve": ["CVE-2019-0820"],
                "cwe": ["CWE-400"],
                "xref": [],
                "ResultMatching": {}
            }
        }],
        "columnKind": "utf16CodeUnits",
        "properties": {
            "amaroq": {
                "timestamp": "2023-01-27T18:44:47.512217Z",
                "version": "1.0",
                "summary": {
                    "new": 41,
                    "absent": 0,
                    "unchanged": 0,
                    "updated": 0,
                    "suppressed": 0,
                    "critical": 0,
                    "high": 18,
                    "medium": 22,
                    "low": 1
                },
                "organizationId": "29A2DA7D-F9DD-4810-8D9A-62A9B27C3817",
                "projectId": "A490C17A-058C-4566-9C72-D536D13282FF",
                "id": "amaroq-SnykOpenSource-2023-01-27T18:44:47.512217Z"
            }
        }
    }]
}